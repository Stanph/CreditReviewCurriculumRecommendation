import { CliContext } from '../context';
export interface Template {
    name: string;
    location: string;
}
export declare class InitManager {
    protected readonly context: any;
    protected source: any[];
    protected name: string;
    protected location: string;
    protected cliContext: CliContext;
    constructor(context: any);
    output(): Promise<void>;
    render(): Promise<void>;
    install(): Promise<void>;
    executeHooks(): Promise<void>;
    protected getCliContext(): Promise<CliContext>;
    protected get outputDir(): string;
    protected checkOutputDir(): Promise<void>;
    protected toOfficialTemplate(name: string, location: string): {
        name: string;
        value: {
            location: string;
            name: string;
        };
    };
    protected toThirdPartyTemplate(item: any): {
        name: string;
        value: {
            location: any;
            name: any;
        };
    };
    protected selectTemplate(): Promise<void>;
    protected isLocalTemplate(): boolean;
    protected get realLocation(): string;
    protected doOutput(): Promise<void>;
    protected outputLocalTemplate(): Promise<void>;
    protected outputRemoteTempate(): void;
}
//# sourceMappingURL=init-manager.d.ts.map