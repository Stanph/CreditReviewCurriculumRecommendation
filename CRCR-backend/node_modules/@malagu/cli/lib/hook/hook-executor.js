"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("path");
var ts_node_1 = require("ts-node");
var chalk = require('chalk');
// Avoid duplicate registrations
if (!process[ts_node_1.REGISTER_INSTANCE]) {
    ts_node_1.register();
}
var HookExecutor = /** @class */ (function () {
    function HookExecutor() {
    }
    HookExecutor.prototype.executeInitHooks = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var modules;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        modules = context.pkg.initHookModules;
                        return [4 /*yield*/, this.doExecuteHooks(modules, context, 'initHooks')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    HookExecutor.prototype.executeBuildHooks = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var modules;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        modules = context.pkg.buildHookModules;
                        return [4 /*yield*/, this.doExecuteHooks(modules, context, 'buildHooks')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    HookExecutor.prototype.executeDeployHooks = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var modules;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        modules = context.pkg.deployHookModules;
                        if (modules.size === 0) {
                            console.log(chalk.yellow('Please provide the deploy hook first.'));
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.doExecuteHooks(modules, context, 'deployHooks')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    HookExecutor.prototype.executeServeHooks = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var modules;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        modules = context.pkg.serveHookModules;
                        if (modules.size === 0) {
                            console.log(chalk.yellow('Please provide the serve hook first.'));
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.doExecuteHooks(modules, context, 'serveHooks')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    HookExecutor.prototype.executeWebpackHooks = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var modules;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        modules = context.pkg.webpackHookModules;
                        return [4 /*yield*/, this.doExecuteHooks(modules, context, 'webpackHooks')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    HookExecutor.prototype.executeHooks = function (context, hookName) {
        return __awaiter(this, void 0, void 0, function () {
            var modules;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        modules = context.pkg.computeModules(hookName);
                        return [4 /*yield*/, this.doExecuteHooks(modules, context, hookName)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    HookExecutor.prototype.doExecuteHooks = function (modules, context, hookName) {
        return __awaiter(this, void 0, void 0, function () {
            var malagu, _a, _b, m, _c, moduleName, modulePath, name_1, config, error_1, e_1_1;
            var e_1, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        malagu = context.pkg.backendConfig['malagu'];
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 9, 10, 11]);
                        _a = __values(modules.entries()), _b = _a.next();
                        _e.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 8];
                        m = _b.value;
                        _c = __read(m, 2), moduleName = _c[0], modulePath = _c[1];
                        name_1 = moduleName.split('/').pop();
                        if (!name_1) return [3 /*break*/, 7];
                        config = malagu[name_1];
                        if (!(!config || config[hookName] !== false)) return [3 /*break*/, 7];
                        _e.label = 3;
                    case 3:
                        _e.trys.push([3, 5, , 7]);
                        return [4 /*yield*/, require(path_1.resolve(context.pkg.projectPath, 'node_modules', modulePath)).default(context)];
                    case 4:
                        _e.sent();
                        return [3 /*break*/, 7];
                    case 5:
                        error_1 = _e.sent();
                        return [4 /*yield*/, require(modulePath).default(context)];
                    case 6:
                        _e.sent();
                        return [3 /*break*/, 7];
                    case 7:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 8: return [3 /*break*/, 11];
                    case 9:
                        e_1_1 = _e.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 11];
                    case 10:
                        try {
                            if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    return HookExecutor;
}());
exports.HookExecutor = HookExecutor;
//# sourceMappingURL=hook-executor.js.map