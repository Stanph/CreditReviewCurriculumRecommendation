/// <reference types="webpack-dev-server" />
/// <reference types="node" />
import { ApplicationPackage } from '../package';
import webpack = require('webpack');
import * as https from 'https';
import * as http from 'http';
import { CommanderStatic } from 'commander';
export interface CliContext {
    program: CommanderStatic;
    pkg: ApplicationPackage;
    [key: string]: any;
}
export declare namespace CliContext {
    function create(program: CommanderStatic, mode?: string[], projectPath?: string): Promise<CliContext>;
}
export interface HookContext extends CliContext {
    configurations: webpack.Configuration[];
}
export declare namespace HookContext {
    function create(cliContext: CliContext): Promise<HookContext>;
    function getConfiguration(target: string, configurations: webpack.Configuration[]): webpack.Configuration | undefined;
}
export interface ServeContext extends HookContext {
    server: http.Server | https.Server;
    app: any;
    compiler: webpack.Compiler;
    entryContextProvider: () => Promise<any>;
}
//# sourceMappingURL=context-protocol.d.ts.map