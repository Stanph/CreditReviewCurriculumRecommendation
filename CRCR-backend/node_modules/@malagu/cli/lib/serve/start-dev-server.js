"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var net = require("net");
var path_1 = require("path");
var webpack = require("webpack");
var Server = require('webpack-dev-server/lib/Server');
var setupExitSignals = require('webpack-dev-server/lib/utils/setupExitSignals');
var colors = require('webpack-dev-server/lib/utils/colors');
var processOptions = require('webpack-dev-server/lib/utils/processOptions');
var createLogger = require('webpack-dev-server/lib/utils/createLogger');
var findPort = require('webpack-dev-server/lib/utils/findPort');
var FriendlyErrorsWebpackPlugin = require("friendly-errors-webpack-plugin");
var utils_1 = require("../webpack/utils");
var webpackDevMiddleware = require('webpack-dev-middleware');
var constants_1 = require("../constants");
var delay = require("delay");
var clearModule = require('clear-module');
var server;
function createCompiler(configuration, options, log) {
    try {
        return webpack(configuration);
    }
    catch (err) {
        if (err instanceof webpack.WebpackOptionsValidationError) {
            log.error(colors.error(options.stats.colors, err.message));
            process.exit(1);
        }
        throw err;
    }
}
function getEntryPath(configuration) {
    var _a = configuration.output, path = _a.path, filename = _a.filename;
    return path_1.resolve(path, filename);
}
function attachBackendServer(executeServeHooks, configuration, options, log, c) {
    var _this = this;
    var compiler = c || createCompiler(configuration, options, log);
    if (!c) {
        server.app.use(webpackDevMiddleware(compiler, { fs: compiler.outputFileSystem, logLevel: 'error' }));
        new FriendlyErrorsWebpackPlugin({
            compilationSuccessInfo: {
                messages: utils_1.getDevSuccessInfo(configuration.devServer, configuration.name),
                notes: []
            }
        }).apply(compiler);
    }
    var entryContextProvider = function () { return __awaiter(_this, void 0, void 0, function () {
        var entryPath;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    entryPath = getEntryPath(configuration);
                    clearModule(entryPath);
                    _a.label = 1;
                case 1:
                    if (!true) return [3 /*break*/, 3];
                    if (fs.existsSync(entryPath)) {
                        return [2 /*return*/, require(entryPath)];
                    }
                    return [4 /*yield*/, delay(200)];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    }); };
    executeServeHooks(server.listeningApp, server.app, compiler, entryContextProvider);
}
function doStartDevServer(configurations, options, executeServeHooks) {
    var log = createLogger(options);
    var _a = __read(configurations, 2), configuration = _a[0], backendConfiguration = _a[1];
    var compiler = createCompiler(configuration, options, log);
    new FriendlyErrorsWebpackPlugin({
        compilationSuccessInfo: {
            messages: utils_1.getDevSuccessInfo(configuration.devServer, configuration.name),
            notes: []
        }
    }).apply(compiler);
    try {
        server = new Server(compiler, options, log);
        setupExitSignals(server);
        if (backendConfiguration) {
            attachBackendServer(executeServeHooks, backendConfiguration, options, log);
        }
        else if (configuration.name === constants_1.BACKEND_TARGET) {
            attachBackendServer(executeServeHooks, configuration, options, log, compiler);
        }
    }
    catch (err) {
        if (err.name === 'ValidationError') {
            log.error(colors.error(options.stats.colors, err.message));
            process.exit(1);
        }
        throw err;
    }
    if (options.socket) {
        server.listeningApp.on('error', function (e) {
            if (e.code === 'EADDRINUSE') {
                var clientSocket = new net.Socket();
                clientSocket.on('error', function (err) {
                    if (err.code === 'ECONNREFUSED') {
                        // No other server listening on this socket so it can be safely removed
                        fs.unlinkSync(options.socket);
                        server.listen(options.socket, options.host, function (error) {
                            if (error) {
                                throw error;
                            }
                        });
                    }
                });
                clientSocket.connect({ path: options.socket }, function () {
                    throw new Error('This socket is already used');
                });
            }
        });
        server.listen(options.socket, options.host, function (err) {
            if (err) {
                throw err;
            }
            // chmod 666 (rw rw rw)
            var READ_WRITE = 438;
            fs.chmod(options.socket, READ_WRITE, function (e) {
                if (e) {
                    throw e;
                }
            });
        });
    }
    else {
        findPort(options.port)
            .then(function (port) {
            options.port = port;
            server.listen(options.port, options.host, function (err) {
                if (err) {
                    throw err;
                }
            });
        })
            .catch(function (err) {
            throw err;
        });
    }
    return compiler;
}
function startDevServer(configurations, executeServeHooks) {
    processOptions(configurations, { info: false }, function (cs, options) {
        doStartDevServer(cs, options, executeServeHooks);
    });
}
exports.startDevServer = startDevServer;
//# sourceMappingURL=start-dev-server.js.map