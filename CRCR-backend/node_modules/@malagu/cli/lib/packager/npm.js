"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var fs_extra_1 = require("fs-extra");
var NPM = /** @class */ (function () {
    function NPM() {
    }
    Object.defineProperty(NPM.prototype, "lockfileName", {
        get: function () {
            return 'package-lock.json';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NPM.prototype, "copyPackageSectionNames", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NPM.prototype, "mustCopyModules", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    NPM.prototype.getProdDependencies = function (cwd, depth) {
        return __awaiter(this, void 0, void 0, function () {
            var command, args, ignoredNpmErrors, processOutput, err_1, errors, failed;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        command = /^win/.test(process.platform) ? 'npm.cmd' : 'npm';
                        args = [
                            'ls',
                            '-prod',
                            '-json',
                            "-depth=" + (depth || 1)
                        ];
                        ignoredNpmErrors = [
                            { npmError: 'extraneous', log: false },
                            { npmError: 'missing', log: false },
                            { npmError: 'peer dep missing', log: true }
                        ];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, utils_1.spawnProcess(command, args, { cwd: cwd })];
                    case 2:
                        processOutput = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        if (err_1 instanceof utils_1.SpawnError) {
                            errors = err_1.stderr ? err_1.stderr.split('\n') : [];
                            failed = errors.reduce(function (f, error) {
                                if (f) {
                                    return true;
                                }
                                return (error &&
                                    !ignoredNpmErrors.some(function (ignoredError) { return error.startsWith(error, "npm ERR! " + ignoredError.npmError); }));
                            }, false);
                            if (!failed && !err_1.stdout) {
                                processOutput = { stdout: err_1.stdout };
                            }
                        }
                        else {
                            throw err_1;
                        }
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, JSON.parse(processOutput.stdout)];
                }
            });
        });
    };
    NPM.prototype.readLockfile = function (lockfilePath) {
        return fs_extra_1.readJSON(lockfilePath);
    };
    NPM.prototype.writeLockfile = function (lockfilePath, content) {
        return fs_extra_1.writeJSON(lockfilePath, content, { spaces: 2 });
    };
    NPM.prototype._rebaseFileReferences = function (pathToPackageRoot, moduleVersion) {
        if (/^file:[^/]{2}/.test(moduleVersion)) {
            var filePath = moduleVersion.replace(/^file:/, '');
            return ("file:" + pathToPackageRoot + "/" + filePath).replace(/\\/g, '/');
        }
        return moduleVersion;
    };
    /**
     * We should not be modifying 'package-lock.json'
     * because this file should be treated as internal to npm.
     *
     * Rebase package-lock is a temporary workaround and must be
     * removed as soon as https://github.com/npm/npm/issues/19183 gets fixed.
     */
    NPM.prototype.rebaseLockfile = function (pathToPackageRoot, lockfile) {
        var e_1, _a;
        if (lockfile.version) {
            lockfile.version = this._rebaseFileReferences(pathToPackageRoot, lockfile.version);
        }
        if (lockfile.dependencies) {
            try {
                for (var _b = __values(lockfile.dependencies), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var lockedDependency = _c.value;
                    this.rebaseLockfile(pathToPackageRoot, lockedDependency);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return lockfile;
    };
    NPM.prototype.install = function (cwd) {
        var command = /^win/.test(process.platform) ? 'npm.cmd' : 'npm';
        var args = ['install'];
        return utils_1.spawnProcess(command, args, { cwd: cwd, stdio: 'inherit' });
    };
    NPM.prototype.prune = function (cwd) {
        var command = /^win/.test(process.platform) ? 'npm.cmd' : 'npm';
        var args = ['prune'];
        return utils_1.spawnProcess(command, args, { cwd: cwd });
    };
    NPM.prototype.runScripts = function (cwd, scriptNames) {
        var command = /^win/.test(process.platform) ? 'npm.cmd' : 'npm';
        var promises = scriptNames.map(function (scriptName) {
            var args = ['run', scriptName];
            return utils_1.spawnProcess(command, args, { cwd: cwd });
        });
        return Promise.all(promises);
    };
    return NPM;
}());
exports.NPM = NPM;
//# sourceMappingURL=npm.js.map