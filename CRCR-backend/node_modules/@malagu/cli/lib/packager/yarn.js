"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var fs_extra_1 = require("fs-extra");
var Yarn = /** @class */ (function () {
    function Yarn() {
    }
    Object.defineProperty(Yarn.prototype, "lockfileName", {
        get: function () {
            return 'yarn.lock';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Yarn.prototype, "copyPackageSectionNames", {
        get: function () {
            return ['resolutions'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Yarn.prototype, "mustCopyModules", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Yarn.prototype.getProdDependencies = function (cwd, depth) {
        return __awaiter(this, void 0, void 0, function () {
            var command, args, ignoredYarnErrors, processOutput, err_1, errors, failed, parsedTree, convertTrees;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        command = /^win/.test(process.platform) ? 'yarn.cmd' : 'yarn';
                        args = ['list', "--depth=" + (depth || 1), '--json', '--production'];
                        ignoredYarnErrors = [];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, utils_1.spawnProcess(command, args, { cwd: cwd })];
                    case 2:
                        processOutput = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        if (err_1 instanceof utils_1.SpawnError) {
                            errors = err_1.stderr ? err_1.stderr.split('\n') : [];
                            failed = errors.reduce(function (f, error) {
                                if (f) {
                                    return true;
                                }
                                return (error &&
                                    !ignoredYarnErrors.some(function (ignoredError) { return error.startsWith(error, "npm ERR! " + ignoredError.npmError); }));
                            }, false);
                            if (!failed && !err_1.stdout) {
                                processOutput = { stdout: err_1.stdout };
                            }
                        }
                        else {
                            throw err_1;
                        }
                        return [3 /*break*/, 4];
                    case 4:
                        parsedTree = JSON.parse(processOutput.stdout);
                        convertTrees = function (trees) {
                            return trees.reduce(function (accumulator, tree) {
                                var splitModule = tree.name.split('@');
                                if (tree.name.startsWith('@')) {
                                    splitModule.splice(0, 1);
                                    splitModule[0] = '@' + splitModule[0];
                                }
                                accumulator[splitModule[0]] = {
                                    version: splitModule.slice(1).join('@'),
                                    dependencies: convertTrees(tree.children)
                                };
                                return accumulator;
                            }, {});
                        };
                        return [2 /*return*/, {
                                problems: [],
                                dependencies: convertTrees(parsedTree.data.trees || [])
                            }];
                }
            });
        });
    };
    Yarn.prototype.readLockfile = function (lockfilePath) {
        return fs_extra_1.readFile(lockfilePath, 'utf8');
    };
    Yarn.prototype.writeLockfile = function (lockfilePath, content) {
        return fs_extra_1.writeFile(lockfilePath, content, 'utf8');
    };
    Yarn.prototype.rebaseLockfile = function (pathToPackageRoot, lockfile) {
        var fileVersionMatcher = /[^"/]@(?:file:)?((?:\.\/|\.\.\/).*?)[":,]/gm;
        var replacements = [];
        var match;
        // Detect all references and create replacement line strings
        // eslint-disable-next-line no-null/no-null
        while ((match = fileVersionMatcher.exec(lockfile)) !== null) {
            replacements.push({
                oldRef: match[1],
                newRef: (pathToPackageRoot + "/" + match[1]).replace(/\\/g, '/')
            });
        }
        // Replace all lines in lockfile
        return replacements.reduce(function (__, replacement) { return __.replace(replacement.oldRef, replacement.newRef); }, lockfile);
    };
    Yarn.prototype.install = function (cwd, packagerOptions) {
        var command = /^win/.test(process.platform) ? 'yarn.cmd' : 'yarn';
        var args = ['install', '--frozen-lockfile', '--non-interactive'];
        // Convert supported packagerOptions
        if (packagerOptions.ignoreScripts) {
            args.push('--ignore-scripts');
        }
        return utils_1.spawnProcess(command, args, { cwd: cwd, stdio: 'inherit' });
    };
    // "Yarn install" prunes automatically
    Yarn.prototype.prune = function (cwd, packagerOptions) {
        return this.install(cwd, packagerOptions);
    };
    Yarn.prototype.runScripts = function (cwd, scriptNames) {
        var command = /^win/.test(process.platform) ? 'yarn.cmd' : 'yarn';
        var promises = scriptNames.map(function (scriptName) {
            var args = ['run', scriptName];
            return utils_1.spawnProcess(command, args, { cwd: cwd });
        });
        return Promise.all(promises);
    };
    return Yarn;
}());
exports.Yarn = Yarn;
//# sourceMappingURL=yarn.js.map