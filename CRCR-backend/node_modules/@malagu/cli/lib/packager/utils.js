"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var npm_1 = require("./npm");
var yarn_1 = require("./yarn");
var child_process_1 = require("child_process");
var SpawnError = /** @class */ (function (_super) {
    __extends(SpawnError, _super);
    function SpawnError(message, stdout, stderr) {
        var _this = _super.call(this, message) || this;
        _this.stdout = stdout;
        _this.stderr = stderr;
        return _this;
    }
    SpawnError.prototype.toString = function () {
        return this.message + "\n" + this.stderr;
    };
    return SpawnError;
}(Error));
exports.SpawnError = SpawnError;
function spawnProcess(command, args, options) {
    return new Promise(function (resolve, reject) {
        if (options && options.stdio === 'inherit') {
            child_process_1.spawnSync(command, args, options);
            resolve({});
        }
        else {
            var child = child_process_1.spawn(command, args, options);
            var stdout_1 = '';
            var stderr_1 = '';
            child.stdout.setEncoding('utf8');
            child.stderr.setEncoding('utf8');
            child.stdout.on('data', function (data) {
                stdout_1 += data;
            });
            child.stderr.on('data', function (data) {
                stderr_1 += data;
            });
            child.on('error', function (err) {
                reject(err);
            });
            child.on('close', function (exitCode) {
                if (exitCode !== 0) {
                    reject(new SpawnError(command + " " + args.join(' ') + " failed with code " + exitCode, stdout_1, stderr_1));
                }
                else {
                    resolve({ stdout: stdout_1, stderr: stderr_1 });
                }
            });
        }
    });
}
exports.spawnProcess = spawnProcess;
function getPackager(packagerId) {
    if (packagerId === void 0) { packagerId = 'yarn'; }
    var registeredPackagers = {
        npm: new npm_1.NPM(),
        yarn: new yarn_1.Yarn()
    };
    if (packagerId in registeredPackagers) {
        return registeredPackagers[packagerId];
    }
    var message = "Could not find packager '" + packagerId + "'";
    console.log("ERROR: " + message);
    throw new Error(message);
}
exports.getPackager = getPackager;
//# sourceMappingURL=utils.js.map