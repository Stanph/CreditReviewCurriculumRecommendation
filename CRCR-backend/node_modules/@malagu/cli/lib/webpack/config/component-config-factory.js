"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var nodePathList = (process.env.NODE_PATH || '')
    .split(process.platform === 'win32' ? ';' : ':')
    .filter(function (p) { return !!p; });
var ComponentConfigFactory = /** @class */ (function () {
    function ComponentConfigFactory() {
    }
    ComponentConfigFactory.prototype.create = function (config, context, target) {
        var pkg = context.pkg;
        return {
            resolveLoader: {
                modules: __spread([
                    path.join(__dirname, '..', 'loader'),
                    path.join(__dirname, '..', '..', '..', 'node_modules'),
                    'node_modules'
                ], nodePathList)
            },
            module: {
                rules: [
                    {
                        test: /core[\\/]lib[\\/]common[\\/]container[\\/]dynamic-container\.js$/,
                        use: {
                            loader: 'component-loader',
                            options: {
                                target: target,
                                modules: Array.from(pkg[target + "Modules"].values())
                            }
                        }
                    },
                ]
            }
        };
    };
    ComponentConfigFactory.prototype.support = function (context, target) {
        return true;
    };
    return ComponentConfigFactory;
}());
exports.ComponentConfigFactory = ComponentConfigFactory;
//# sourceMappingURL=component-config-factory.js.map