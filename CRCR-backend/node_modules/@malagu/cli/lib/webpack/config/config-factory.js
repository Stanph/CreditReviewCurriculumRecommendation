"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var base_config_factory_1 = require("./base-config-factory");
var merge = require("webpack-merge");
var hook_executor_1 = require("../../hook/hook-executor");
var entry_config_factory_1 = require("./entry-config-factory");
var output_config_factory_1 = require("./output-config-factory");
var der_server_config_factory_1 = require("./der-server-config-factory");
var plugin_config_factory_1 = require("./plugin-config-factory");
var constants_1 = require("../../constants");
var malagu_yaml_config_factory_1 = require("./malagu-yaml-config-factory");
var component_config_factory_1 = require("./component-config-factory");
var utils_1 = require("../utils");
var chalk = require('chalk');
var ConfigFactory = /** @class */ (function () {
    function ConfigFactory() {
    }
    ConfigFactory.prototype.create = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var pkg, configurations, targets, configFactories, targets_1, targets_1_1, target, config, configFactories_1, configFactories_1_1, configFactory;
            var e_1, _a, e_2, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        pkg = context.pkg;
                        configurations = [];
                        targets = [constants_1.FRONTEND_TARGET, constants_1.BACKEND_TARGET];
                        configFactories = [
                            new base_config_factory_1.BaseConfigFactory(),
                            new entry_config_factory_1.EntryConfigFactory(),
                            new output_config_factory_1.OutputConfigFactory(),
                            new der_server_config_factory_1.DevServerConfigFactory(),
                            new plugin_config_factory_1.CopyWepackPluginConfigFactory(),
                            new plugin_config_factory_1.ForkTsCheckerWebpackPluginConfigFactory(),
                            new plugin_config_factory_1.HardSourceWebpackPluginConfigFactory(),
                            new plugin_config_factory_1.EnvironmentPluginConfigFactory(),
                            new component_config_factory_1.ComponentConfigFactory(),
                            new malagu_yaml_config_factory_1.MalaguYamlConfigFactory(),
                            new plugin_config_factory_1.HtmlWebpackPluginConfigFactory(),
                            new plugin_config_factory_1.HtmlWebpackTagsPluginConfigFactory()
                        ];
                        try {
                            for (targets_1 = __values(targets), targets_1_1 = targets_1.next(); !targets_1_1.done; targets_1_1 = targets_1.next()) {
                                target = targets_1_1.value;
                                if (!utils_1.support(pkg, target)) {
                                    continue;
                                }
                                config = {};
                                try {
                                    for (configFactories_1 = (e_2 = void 0, __values(configFactories)), configFactories_1_1 = configFactories_1.next(); !configFactories_1_1.done; configFactories_1_1 = configFactories_1.next()) {
                                        configFactory = configFactories_1_1.value;
                                        if (configFactory.support(context, target)) {
                                            config = merge(config, configFactory.create(config, context, target));
                                        }
                                    }
                                }
                                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                                finally {
                                    try {
                                        if (configFactories_1_1 && !configFactories_1_1.done && (_b = configFactories_1.return)) _b.call(configFactories_1);
                                    }
                                    finally { if (e_2) throw e_2.error; }
                                }
                                console.log(chalk(templateObject_1 || (templateObject_1 = __makeTemplateObject(["malagu {green.bold target} - ", ""], ["malagu {green.bold target} - ", ""])), target));
                                configurations.push(config);
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (targets_1_1 && !targets_1_1.done && (_a = targets_1.return)) _a.call(targets_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        return [4 /*yield*/, new hook_executor_1.HookExecutor().executeWebpackHooks(__assign(__assign({}, context), { configurations: configurations }))];
                    case 1:
                        _c.sent();
                        return [2 /*return*/, configurations];
                }
            });
        });
    };
    return ConfigFactory;
}());
exports.ConfigFactory = ConfigFactory;
var templateObject_1;
//# sourceMappingURL=config-factory.js.map