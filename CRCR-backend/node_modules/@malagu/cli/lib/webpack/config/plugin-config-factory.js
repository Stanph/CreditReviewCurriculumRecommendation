"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var webpack = require("webpack");
var path = require("path");
var fs_extra_1 = require("fs-extra");
var utils_1 = require("../utils");
var constants_1 = require("../../constants");
var yaml = require("js-yaml");
var ForkTsCheckerNotifierWebpackPlugin = require('fork-ts-checker-notifier-webpack-plugin');
var ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');
var CopyPlugin = require('copy-webpack-plugin');
var HardSourceWebpackPlugin = require('hard-source-webpack-plugin');
var HtmlWebpackTagsPlugin = require('html-webpack-tags-plugin');
var HtmlWebpackPlugin = require('html-webpack-plugin');
var CopyWepackPluginConfigFactory = /** @class */ (function () {
    function CopyWepackPluginConfigFactory() {
    }
    CopyWepackPluginConfigFactory.prototype.create = function (config, context, target) {
        var e_1, _a;
        var pkg = context.pkg;
        var assets = [];
        try {
            for (var _b = __values(pkg[target + "Assets"].values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var assert = _c.value;
                var p = path.join(pkg.projectPath, 'node_modules', assert);
                if (fs_extra_1.existsSync(p)) {
                    assets.push(p);
                }
                else if (fs_extra_1.existsSync(assert)) {
                    assets.push(assert);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return {
            plugins: [
                new CopyPlugin(assets.map(function (assert) { return ({
                    from: assert,
                    to: path.join(config.output.path, 'assets')
                }); })),
            ]
        };
    };
    CopyWepackPluginConfigFactory.prototype.support = function (context, target) {
        return true;
    };
    return CopyWepackPluginConfigFactory;
}());
exports.CopyWepackPluginConfigFactory = CopyWepackPluginConfigFactory;
var EnvironmentPluginConfigFactory = /** @class */ (function () {
    function EnvironmentPluginConfigFactory() {
    }
    EnvironmentPluginConfigFactory.prototype.create = function (config, context, target) {
        var pkg = context.pkg;
        var c = utils_1.getConfig(pkg, target);
        var homePath = utils_1.getHomePath(pkg, target);
        fs_extra_1.ensureDirSync(homePath);
        var configPath = path.join(homePath, constants_1.CONFIG_FILE);
        yaml.dump(c);
        fs_extra_1.writeFileSync(configPath, yaml.dump(c), { encoding: 'utf8' });
        return {
            plugins: [
                new webpack.EnvironmentPlugin({
                    'MALAGU_CONFIG': c
                })
            ]
        };
    };
    EnvironmentPluginConfigFactory.prototype.support = function (context, target) {
        return true;
    };
    return EnvironmentPluginConfigFactory;
}());
exports.EnvironmentPluginConfigFactory = EnvironmentPluginConfigFactory;
var ForkTsCheckerWebpackPluginConfigFactory = /** @class */ (function () {
    function ForkTsCheckerWebpackPluginConfigFactory() {
    }
    ForkTsCheckerWebpackPluginConfigFactory.prototype.create = function (config, context, target) {
        var pkg = context.pkg;
        return {
            plugins: [
                new ForkTsCheckerWebpackPlugin(__assign({ eslint: true }, utils_1.getWebpackConfig(pkg, target).forkTSCheckerWebpackPlugin || {})),
                new ForkTsCheckerNotifierWebpackPlugin({ title: 'TypeScript', excludeWarnings: false })
            ]
        };
    };
    ForkTsCheckerWebpackPluginConfigFactory.prototype.support = function (context, target) {
        return true;
    };
    return ForkTsCheckerWebpackPluginConfigFactory;
}());
exports.ForkTsCheckerWebpackPluginConfigFactory = ForkTsCheckerWebpackPluginConfigFactory;
var HardSourceWebpackPluginConfigFactory = /** @class */ (function () {
    function HardSourceWebpackPluginConfigFactory() {
    }
    HardSourceWebpackPluginConfigFactory.prototype.create = function (config, context, target) {
        var pkg = context.pkg;
        var homePath = utils_1.getHomePath(pkg, target);
        var configPath = path.join(homePath, constants_1.CONFIG_FILE);
        var relativeConfigPath = path.relative(pkg.projectPath, configPath);
        return {
            plugins: [
                new HardSourceWebpackPlugin(__assign({
                    environmentHash: {
                        root: pkg.projectPath,
                        directories: [],
                        files: ['package-lock.json', 'yarn.lock', relativeConfigPath],
                    }
                }, utils_1.getWebpackConfig(pkg, target).hardSourceWebpackPlugin || {}))
            ]
        };
    };
    HardSourceWebpackPluginConfigFactory.prototype.support = function (context, target) {
        return true;
    };
    return HardSourceWebpackPluginConfigFactory;
}());
exports.HardSourceWebpackPluginConfigFactory = HardSourceWebpackPluginConfigFactory;
var HtmlWebpackPluginConfigFactory = /** @class */ (function () {
    function HtmlWebpackPluginConfigFactory() {
    }
    HtmlWebpackPluginConfigFactory.prototype.create = function (config, context, target) {
        var pkg = context.pkg;
        return {
            plugins: [
                new HtmlWebpackPlugin(__assign({ title: 'Malagu App' }, utils_1.getWebpackConfig(pkg, constants_1.FRONTEND_TARGET).htmlWebpackPlugin || {})),
            ]
        };
    };
    HtmlWebpackPluginConfigFactory.prototype.support = function (context, target) {
        return constants_1.FRONTEND_TARGET === target;
    };
    return HtmlWebpackPluginConfigFactory;
}());
exports.HtmlWebpackPluginConfigFactory = HtmlWebpackPluginConfigFactory;
var HtmlWebpackTagsPluginConfigFactory = /** @class */ (function () {
    function HtmlWebpackTagsPluginConfigFactory() {
    }
    HtmlWebpackTagsPluginConfigFactory.prototype.create = function (config, context, target) {
        var pkg = context.pkg;
        var pluginConfig = utils_1.getWebpackConfig(pkg, constants_1.FRONTEND_TARGET).htmlWebpackTagsPlugin || {};
        var before = [];
        var after = [];
        for (var key in pluginConfig) {
            if (pluginConfig.hasOwnProperty(key)) {
                var c = pluginConfig[key];
                if (typeof c === 'string') {
                    c = {
                        tags: {
                            path: c,
                            attributes: { crossorigin: true }
                        },
                        append: false
                    };
                }
                if (c.append) {
                    after.push(c);
                }
                else {
                    before.push(c);
                }
            }
        }
        return {
            plugins: __spread(__spread(after, before.reverse()).map(function (c) { return new HtmlWebpackTagsPlugin(c); }))
        };
    };
    HtmlWebpackTagsPluginConfigFactory.prototype.support = function (context, target) {
        return constants_1.FRONTEND_TARGET === target;
    };
    return HtmlWebpackTagsPluginConfigFactory;
}());
exports.HtmlWebpackTagsPluginConfigFactory = HtmlWebpackTagsPluginConfigFactory;
//# sourceMappingURL=plugin-config-factory.js.map