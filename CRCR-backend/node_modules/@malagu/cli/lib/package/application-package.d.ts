import { NodePackage, PublishedNodePackage } from './npm-registry';
import { Component, ComponentPackage, Props, ApplicationLog, ApplicationPackageOptions, ApplicationModuleResolver } from './package-protocol';
import { ComponentPackageLoader } from './component-config-loader';
import { ComponentPackageResolver } from './component-package-resolver';
export declare class ApplicationPackage {
    protected readonly options: ApplicationPackageOptions;
    readonly projectPath: string;
    readonly log: ApplicationLog;
    readonly error: ApplicationLog;
    protected componentPackageLoader: ComponentPackageLoader;
    protected componentPackageResolver: ComponentPackageResolver;
    constructor(options: ApplicationPackageOptions);
    protected _props: Component | undefined;
    get props(): Component;
    protected _rootConfig: Props | undefined;
    get rootConfig(): Props;
    protected _frontendConfig: Props | undefined;
    get frontendConfig(): Props;
    protected _backendConfig: Props | undefined;
    get backendConfig(): Props;
    protected _pkg: PublishedNodePackage | undefined;
    get pkg(): PublishedNodePackage;
    protected _frontendModules: Map<string, string> | undefined;
    protected _backendModules: Map<string, string> | undefined;
    protected _frontendAssets: Map<string, string> | undefined;
    protected _backendAssets: Map<string, string> | undefined;
    protected _initHookModules: Map<string, string> | undefined;
    protected _buildHookModules: Map<string, string> | undefined;
    protected _serveHookModules: Map<string, string> | undefined;
    protected _deployHookModules: Map<string, string> | undefined;
    protected _componentPackages: ComponentPackage[] | undefined;
    protected _webpackHookModules: Map<string, string> | undefined;
    protected _rootComponentPackage: ComponentPackage;
    protected rootComponentPackage(): ComponentPackage;
    /**
     * Component packages in the topological order.
     */
    get componentPackages(): ReadonlyArray<ComponentPackage>;
    getComponentPackage(component: string): ComponentPackage | undefined;
    findComponentPackage(component: string): Promise<ComponentPackage | undefined>;
    newComponentPackage(raw: PublishedNodePackage): ComponentPackage;
    get frontendModules(): Map<string, string>;
    get backendModules(): Map<string, string>;
    get frontendAssets(): Map<string, string>;
    get backendAssets(): Map<string, string>;
    get initHookModules(): Map<string, string>;
    get buildHookModules(): Map<string, string>;
    get serveHookModules(): Map<string, string>;
    get deployHookModules(): Map<string, string>;
    get webpackHookModules(): Map<string, string>;
    isRoot(componentPackage: ComponentPackage | NodePackage): boolean;
    computeModules(type: string, target?: string): Map<string, string>;
    relative(path: string): string;
    path(...segments: string[]): string;
    get packagePath(): string;
    lib(...segments: string[]): string;
    setDependency(name: string, version: string | undefined): boolean;
    protected _moduleResolver: undefined | ApplicationModuleResolver;
    /**
     * A node module resolver in the context of the application package.
     */
    get resolveModule(): ApplicationModuleResolver;
    resolveModulePath(moduleName: string, ...segments: string[]): string;
}
//# sourceMappingURL=application-package.d.ts.map