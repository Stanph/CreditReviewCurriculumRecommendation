"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var json_file_1 = require("./json-file");
var package_protocol_1 = require("./package-protocol");
var component_config_loader_1 = require("./component-config-loader");
var ComponentPackageCollector = /** @class */ (function () {
    function ComponentPackageCollector(pkg, mode) {
        this.pkg = pkg;
        this.mode = mode;
        this.sorted = [];
        this.visited = new Map();
        this.componentPackageLoader = new component_config_loader_1.ComponentPackageLoader(pkg);
    }
    ComponentPackageCollector.prototype.collect = function (pck) {
        this.root = pck;
        this.collectPackages(pck);
        return this.sorted;
    };
    ComponentPackageCollector.prototype.collectPackages = function (pck) {
        if (!pck.dependencies) {
            return;
        }
        // eslint-disable-next-line guard-for-in
        for (var dependency in pck.dependencies) {
            var versionRange = pck.dependencies[dependency];
            this.collectPackage(dependency, versionRange);
        }
    };
    ComponentPackageCollector.prototype.collectPackagesWithParent = function (pck, parent) {
        var current = this.parent;
        this.parent = parent;
        this.collectPackages(pck);
        this.parent = current;
    };
    ComponentPackageCollector.prototype.collectPackage = function (name, versionRange) {
        if (this.visited.has(name)) {
            return;
        }
        this.visited.set(name, true);
        var packagePath;
        try {
            packagePath = this.pkg.resolveModule(name + '/package.json');
        }
        catch (error) {
            console.warn("Failed to resolve module: " + name);
        }
        if (!packagePath) {
            return;
        }
        var pck = json_file_1.readJsonFile(packagePath);
        if (package_protocol_1.RawComponentPackage.is(pck)) {
            pck.version = versionRange;
            pck.malaguComponent = {};
            this.componentPackageLoader.load(pck, this.mode);
            var componentPackage = this.pkg.newComponentPackage(pck);
            this.collectPackagesWithParent(pck, componentPackage);
            this.sorted.push(componentPackage);
        }
    };
    return ComponentPackageCollector;
}());
exports.ComponentPackageCollector = ComponentPackageCollector;
//# sourceMappingURL=component-package-collector.js.map