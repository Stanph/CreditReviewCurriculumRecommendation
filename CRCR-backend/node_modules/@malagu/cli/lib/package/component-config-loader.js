"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var package_protocol_1 = require("./package-protocol");
var yaml = require("js-yaml");
var constants_1 = require("../constants");
var fs_1 = require("fs");
var lodash_1 = require("lodash");
var ComponentPackageLoader = /** @class */ (function () {
    function ComponentPackageLoader(pkg) {
        this.pkg = pkg;
    }
    ComponentPackageLoader.prototype.load = function (nodePackage, mode) {
        var e_1, _a;
        var config = {};
        config = this.loadConfig(nodePackage);
        var merged = __spread(mode);
        if (config) {
            var modeForConfig = Array.isArray(config.mode) ? config.mode : config.mode ? [config.mode] : [];
            merged = Array.from(new Set(__spread(modeForConfig, merged)));
        }
        try {
            for (var merged_1 = __values(merged), merged_1_1 = merged_1.next(); !merged_1_1.done; merged_1_1 = merged_1.next()) {
                var m = merged_1_1.value;
                var configForMode = this.loadConfig(nodePackage, m);
                if (configForMode) {
                    config = lodash_1.mergeWith(config, configForMode, package_protocol_1.customizer);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (merged_1_1 && !merged_1_1.done && (_a = merged_1.return)) _a.call(merged_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        nodePackage.malaguComponent = config;
    };
    ComponentPackageLoader.prototype.loadConfig = function (nodePackage, mode) {
        var configPath = mode ? "malagu-" + mode + ".yml" : constants_1.CONFIG_FILE;
        var fullConfigPath = undefined;
        try {
            if (this.pkg.isRoot(nodePackage)) {
                if (fs_1.existsSync(this.pkg.path(configPath))) {
                    fullConfigPath = this.pkg.path(configPath);
                }
            }
            else {
                fullConfigPath = this.pkg.resolveModule(nodePackage.name + ("/" + configPath));
            }
        }
        catch (err) {
            // noop
        }
        if (fullConfigPath) {
            return yaml.load(fs_1.readFileSync(fullConfigPath, { encoding: 'utf8' }));
        }
    };
    return ComponentPackageLoader;
}());
exports.ComponentPackageLoader = ComponentPackageLoader;
//# sourceMappingURL=component-config-loader.js.map