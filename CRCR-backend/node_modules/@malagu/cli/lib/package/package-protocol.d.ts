import { PublishedNodePackage, NodePackage } from './npm-registry';
export declare type ApplicationLog = (message?: any, ...optionalParams: any[]) => void;
export declare class ApplicationPackageOptions {
    readonly projectPath: string;
    readonly log?: ApplicationLog;
    readonly error?: ApplicationLog;
    readonly mode: string[];
}
export declare type ApplicationModuleResolver = (modulePath: string) => string;
export declare function customizer(objValue: any, srcValue: any): any;
export interface Props {
    [key: string]: any;
    malagu: any;
    entry?: {
        [key: string]: string;
    } | string;
    modules?: string[];
}
export interface Component extends Props {
    name: any;
    auto?: boolean;
    mode?: string[];
    /**
     * Frontend related properties.
     */
    frontend: Props;
    /**
     * Backend specific properties.
     */
    backend: Props;
}
export declare class ComponentPackage {
    readonly raw: PublishedNodePackage & Partial<RawComponentPackage>;
    constructor(raw: PublishedNodePackage & Partial<RawComponentPackage>);
    get name(): string;
    get version(): string;
    get description(): string;
    get malaguComponent(): Component | undefined;
    getAuthor(): string;
}
export interface RawComponentPackage extends PublishedNodePackage {
    malaguComponent: Component;
}
export declare namespace RawComponentPackage {
    function is(pck: NodePackage | undefined): pck is RawComponentPackage;
}
//# sourceMappingURL=package-protocol.d.ts.map