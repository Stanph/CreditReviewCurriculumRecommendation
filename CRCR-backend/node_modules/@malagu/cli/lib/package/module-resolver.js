"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var module_path_builder_1 = require("./module-path-builder");
var path_1 = require("path");
var constants_1 = require("../constants");
var module_checker_1 = require("./module-checker");
var ModuleResolver = /** @class */ (function () {
    function ModuleResolver(pkg) {
        this.pkg = pkg;
        this.modulePathBuilder = new module_path_builder_1.ModulePathBuilder(this.pkg);
        this.moduleChecker = new module_checker_1.ModuleChecker(this.pkg);
    }
    ModuleResolver.prototype.resolve = function (componentPackage) {
        this.resolveComponentModule(componentPackage);
        this.resolveHookModule(componentPackage);
        this.resolveAssertModule(componentPackage);
    };
    ModuleResolver.prototype.addModuleIfExists = function (componentPackage, modulePaths, modulePath) {
        if (this.moduleChecker.check(this.modulePathBuilder.build(componentPackage, modulePath))) {
            if (modulePaths.indexOf(modulePath) === -1) {
                modulePaths.push(modulePath);
            }
        }
    };
    ModuleResolver.prototype.resolveComponentModule = function (componentPackage) {
        var malaguComponent = componentPackage.malaguComponent;
        malaguComponent.frontend = malaguComponent.frontend || [];
        malaguComponent.backend = malaguComponent.backend || [];
        malaguComponent.frontend.modules = __spread(malaguComponent.modules || [], malaguComponent.frontend.modules || []);
        malaguComponent.backend.modules = __spread(malaguComponent.modules || [], malaguComponent.backend.modules || []);
        var frontendModules = malaguComponent.frontend.modules;
        var backendModules = malaguComponent.backend.modules;
        var libOrSrc = this.pkg.isRoot(componentPackage) ? 'src' : 'lib';
        this.addModuleIfExists(componentPackage, frontendModules, path_1.join(libOrSrc, 'browser', constants_1.FRONTEND_TARGET + "-module"));
        this.addModuleIfExists(componentPackage, backendModules, path_1.join(libOrSrc, 'node', constants_1.BACKEND_TARGET + "-module"));
        this.addModuleIfExists(componentPackage, frontendModules, path_1.join(libOrSrc, 'browser', 'module'));
        this.addModuleIfExists(componentPackage, backendModules, path_1.join(libOrSrc, 'node', 'module'));
        this.addModuleIfExists(componentPackage, frontendModules, path_1.join(libOrSrc, 'module'));
        this.addModuleIfExists(componentPackage, backendModules, path_1.join(libOrSrc, 'module'));
        this.addModuleIfExists(componentPackage, frontendModules, path_1.join(libOrSrc, constants_1.FRONTEND_TARGET + "-module"));
        this.addModuleIfExists(componentPackage, backendModules, path_1.join(libOrSrc, constants_1.BACKEND_TARGET + "-module"));
    };
    ModuleResolver.prototype.resolveHookModule = function (componentPackage) {
        var malaguComponent = componentPackage.malaguComponent;
        malaguComponent.webpackHooks = malaguComponent.webpackHooks || [];
        malaguComponent.initHooks = malaguComponent.initHooks || [];
        malaguComponent.buildHooks = malaguComponent.buildHooks || [];
        malaguComponent.deployHooks = malaguComponent.deployHooks || [];
        malaguComponent.serveHooks = malaguComponent.serveHooks || [];
        malaguComponent.webpackHooks = malaguComponent.webpackHooks || [];
        var webpackHooks = malaguComponent.webpackHooks;
        var initHooks = malaguComponent.initHooks;
        var buildHooks = malaguComponent.buildHooks;
        var deployHooks = malaguComponent.deployHooks;
        var serveHooks = malaguComponent.serveHooks;
        var libOrSrc = this.pkg.isRoot(componentPackage) ? 'src' : 'lib';
        this.addModuleIfExists(componentPackage, webpackHooks, path_1.join(libOrSrc, 'hooks', 'webpack'));
        this.addModuleIfExists(componentPackage, webpackHooks, path_1.join(libOrSrc, 'webpack-hook'));
        this.addModuleIfExists(componentPackage, initHooks, path_1.join(libOrSrc, 'hooks', 'init'));
        this.addModuleIfExists(componentPackage, initHooks, path_1.join(libOrSrc, 'init-hook'));
        this.addModuleIfExists(componentPackage, buildHooks, path_1.join(libOrSrc, 'hooks', 'build'));
        this.addModuleIfExists(componentPackage, buildHooks, path_1.join(libOrSrc, 'build-hook'));
        this.addModuleIfExists(componentPackage, deployHooks, path_1.join(libOrSrc, 'hooks', 'deploy'));
        this.addModuleIfExists(componentPackage, deployHooks, path_1.join(libOrSrc, 'deploy-hook'));
        this.addModuleIfExists(componentPackage, serveHooks, path_1.join(libOrSrc, 'hooks', 'serve'));
        this.addModuleIfExists(componentPackage, serveHooks, path_1.join(libOrSrc, 'serve-hook'));
    };
    ModuleResolver.prototype.resolveAssertModule = function (componentPackage) {
        var malaguComponent = componentPackage.malaguComponent;
        malaguComponent.frontend.assets = __spread(malaguComponent.assets || [], malaguComponent.frontend.assets || []);
        malaguComponent.backend.assets = __spread(malaguComponent.assets || [], malaguComponent.backend.assets || []);
        var frontendAssets = malaguComponent.frontend.assets;
        var backendAssets = malaguComponent.backend.assets;
        this.addModuleIfExists(componentPackage, frontendAssets, path_1.join('src', 'assets'));
        this.addModuleIfExists(componentPackage, backendAssets, path_1.join('src', 'assets'));
        this.addModuleIfExists(componentPackage, frontendAssets, 'assets');
        this.addModuleIfExists(componentPackage, backendAssets, 'assets');
        this.addModuleIfExists(componentPackage, frontendAssets, path_1.join('browser', 'assets'));
        this.addModuleIfExists(componentPackage, backendAssets, path_1.join('node', 'assets'));
    };
    return ModuleResolver;
}());
exports.ModuleResolver = ModuleResolver;
//# sourceMappingURL=module-resolver.js.map