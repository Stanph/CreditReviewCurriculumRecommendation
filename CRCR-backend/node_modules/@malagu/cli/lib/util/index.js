"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var paths = require("path");
var fs = require("fs");
var lockfile = require("@yarnpkg/lockfile");
var chalk = require('chalk');
function checkPkgVersionConsistency(pkgName, projectPath) {
    var yarnLockFile = paths.resolve(projectPath, 'yarn.lock');
    var npmLockFile = paths.resolve(projectPath, 'package-lock.json');
    if (fs.existsSync(yarnLockFile)) {
        var file = fs.readFileSync(yarnLockFile, 'utf8');
        var json_1 = lockfile.parse(file);
        if (json_1.type !== 'success') {
            console.log(chalk(templateObject_1 || (templateObject_1 = __makeTemplateObject(["malagu {red.bold error} - yarn.lock file is in conflict status, pls solve the conflict then run the command again"], ["malagu {red.bold error} - yarn.lock file is in conflict status, pls solve the conflict then run the command again"]))));
            process.exit(-1);
        }
        if (json_1.object) {
            var pkgVersion_1 = '';
            Object.keys(json_1.object).forEach(function (pkg) {
                if (pkg.match(pkgName)) {
                    if (!pkgVersion_1) {
                        pkgVersion_1 = json_1.object[pkg].version;
                    }
                    else {
                        // eslint-disable-next-line max-len
                        console.log(chalk(templateObject_2 || (templateObject_2 = __makeTemplateObject(["malagu {red.bold error} - ", " package has existed two different versions[", " vs ", "], thus will cause some unexpected problem, so pls check"], ["malagu {red.bold error} - ", " package has existed two different versions[", " vs ", "], thus will cause some unexpected problem, so pls check"])), pkgName, chalk.yellow(pkgVersion_1), chalk.yellow(json_1.object[pkg].version)));
                        process.exit(-1);
                    }
                }
            });
        }
    }
    else if (fs.existsSync(npmLockFile)) {
        var json_2 = require(npmLockFile);
        Object.keys(json_2.dependencies).forEach(function (dep) {
            if (json_2.dependencies[dep].dependencies && json_2.dependencies[dep].dependencies[pkgName]) {
                // eslint-disable-next-line max-len
                console.log(chalk(templateObject_3 || (templateObject_3 = __makeTemplateObject(["malagu {red.bold error} - ", " package has existed two different versions[", " has version ", " of ", "], thus will cause some unexpected problem, so pls check"], ["malagu {red.bold error} - ", " package has existed two different versions[", " has version ", " of ", "], thus will cause some unexpected problem, so pls check"])), pkgName, chalk.yellow(dep), chalk.yellow(json_2.dependencies[dep].dependencies[pkgName].version), pkgName));
                process.exit(-1);
            }
        });
    }
    else {
        // consider the monorepo project case
        // console.log(chalk`malagu {red.bold error} - Pls generate lock file by Yarn or Npm firstly`);
        // process.exit(1);
    }
}
exports.checkPkgVersionConsistency = checkPkgVersionConsistency;
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=index.js.map