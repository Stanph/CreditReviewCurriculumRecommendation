"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var constants_1 = require("../constants");
var ts_custom_error_1 = require("ts-custom-error");
var NoOpError = /** @class */ (function (_super) {
    __extends(NoOpError, _super);
    function NoOpError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NoOpError;
}(ts_custom_error_1.CustomError));
function autoBind(registry) {
    return new inversify_1.ContainerModule(function (bind, unbind, isBound, rebind) {
        var provideMetadata = Reflect.getMetadata(constants_1.METADATA_KEY.provide, Reflect) || [];
        provideMetadata.map(function (metadata) { return resolve(metadata, bind, rebind); });
        Reflect.defineMetadata(constants_1.METADATA_KEY.provide, [], Reflect);
        var constantMetadata = Reflect.getMetadata(constants_1.METADATA_KEY.constantValue, Reflect) || [];
        constantMetadata.map(function (metadata) { return resolveConstant(metadata, bind, rebind); });
        Reflect.defineMetadata(constants_1.METADATA_KEY.constantValue, [], Reflect);
        if (registry) {
            registry(bind, unbind, isBound, rebind);
        }
    });
}
exports.autoBind = autoBind;
function resolve(metadata, bind, rebind) {
    var isRebind = Reflect.getOwnMetadata(constants_1.METADATA_KEY.rebind, metadata.implementationType);
    var id = Reflect.getOwnMetadata(constants_1.METADATA_KEY.toService, metadata.implementationType);
    var bindWrapper = function (serviceIdentifier) {
        if (id && id !== serviceIdentifier) {
            bind(serviceIdentifier).toService(id);
            throw new NoOpError();
        }
        if (isRebind) {
            return rebind(serviceIdentifier);
        }
        return bind(serviceIdentifier);
    };
    try {
        metadata.constraint(bindWrapper, metadata.implementationType);
    }
    catch (error) {
        if (error instanceof NoOpError) {
            return;
        }
        throw error;
    }
}
function resolveConstant(metadata, bind, rebind) {
    var e_1, _a;
    var ids = Array.isArray(metadata.id) ? metadata.id : [metadata.id];
    var id = ids.shift();
    if (metadata.rebind) {
        rebind(id).toConstantValue(metadata.constantValue);
    }
    else {
        bind(id).toConstantValue(metadata.constantValue);
    }
    try {
        for (var ids_1 = __values(ids), ids_1_1 = ids_1.next(); !ids_1_1.done; ids_1_1 = ids_1.next()) {
            var item = ids_1_1.value;
            bind(item).toService(id);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (ids_1_1 && !ids_1_1.done && (_a = ids_1.return)) _a.call(ids_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
//# sourceMappingURL=auto-bind.js.map