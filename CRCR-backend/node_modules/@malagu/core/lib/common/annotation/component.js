"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_binding_decorators_1 = require("inversify-binding-decorators");
var constants_1 = require("../constants");
var aop_protocol_1 = require("../aop/aop-protocol");
var Scope;
(function (Scope) {
    Scope[Scope["Request"] = 0] = "Request";
    Scope[Scope["Singleton"] = 1] = "Singleton";
    Scope[Scope["Transient"] = 2] = "Transient";
})(Scope = exports.Scope || (exports.Scope = {}));
var ComponentOption;
(function (ComponentOption) {
    function is(options) {
        return options && (options.id !== undefined || options.scope !== undefined ||
            options.rebind !== undefined || options.proxy !== undefined);
    }
    ComponentOption.is = is;
})(ComponentOption = exports.ComponentOption || (exports.ComponentOption = {}));
exports.Component = function (idOrOption) {
    var option = getComponentOption(idOrOption);
    return function (t) {
        applyComponentDecorator(option, t);
    };
};
function getComponentOption(idOrOption) {
    var option = {};
    if (ComponentOption.is(idOrOption)) {
        option = __assign({}, idOrOption);
    }
    else if (idOrOption) {
        option = { id: idOrOption };
    }
    return option;
}
exports.getComponentOption = getComponentOption;
function doProxy(context, t) {
    var _this = this;
    var proxy = new Proxy(t, {
        get: function (target, method, receiver) {
            var func = target[method];
            if (typeof func === 'function') {
                return function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return __awaiter(_this, void 0, void 0, function () {
                        var beforeAdvices, beforeAdvices_1, beforeAdvices_1_1, advice, e_1_1, returnValue, afterReturningAdvices, afterReturningAdvices_1, afterReturningAdvices_1_1, advice, e_2_1, error_1, afterThrowsAdvices, afterThrowsAdvices_1, afterThrowsAdvices_1_1, advice, e_3_1;
                        var e_1, _a, e_2, _b, e_3, _c;
                        return __generator(this, function (_d) {
                            switch (_d.label) {
                                case 0:
                                    _d.trys.push([0, 18, , 27]);
                                    beforeAdvices = context.container.getAll(aop_protocol_1.MethodBeforeAdvice) || [];
                                    _d.label = 1;
                                case 1:
                                    _d.trys.push([1, 6, 7, 8]);
                                    beforeAdvices_1 = __values(beforeAdvices), beforeAdvices_1_1 = beforeAdvices_1.next();
                                    _d.label = 2;
                                case 2:
                                    if (!!beforeAdvices_1_1.done) return [3 /*break*/, 5];
                                    advice = beforeAdvices_1_1.value;
                                    return [4 /*yield*/, advice.before(method, args, t)];
                                case 3:
                                    _d.sent();
                                    _d.label = 4;
                                case 4:
                                    beforeAdvices_1_1 = beforeAdvices_1.next();
                                    return [3 /*break*/, 2];
                                case 5: return [3 /*break*/, 8];
                                case 6:
                                    e_1_1 = _d.sent();
                                    e_1 = { error: e_1_1 };
                                    return [3 /*break*/, 8];
                                case 7:
                                    try {
                                        if (beforeAdvices_1_1 && !beforeAdvices_1_1.done && (_a = beforeAdvices_1.return)) _a.call(beforeAdvices_1);
                                    }
                                    finally { if (e_1) throw e_1.error; }
                                    return [7 /*endfinally*/];
                                case 8: return [4 /*yield*/, func.apply(target, args)];
                                case 9:
                                    returnValue = _d.sent();
                                    afterReturningAdvices = context.container.getAll(aop_protocol_1.AfterReturningAdvice) || [];
                                    _d.label = 10;
                                case 10:
                                    _d.trys.push([10, 15, 16, 17]);
                                    afterReturningAdvices_1 = __values(afterReturningAdvices), afterReturningAdvices_1_1 = afterReturningAdvices_1.next();
                                    _d.label = 11;
                                case 11:
                                    if (!!afterReturningAdvices_1_1.done) return [3 /*break*/, 14];
                                    advice = afterReturningAdvices_1_1.value;
                                    return [4 /*yield*/, advice.afterReturning(returnValue, method, args, t)];
                                case 12:
                                    _d.sent();
                                    _d.label = 13;
                                case 13:
                                    afterReturningAdvices_1_1 = afterReturningAdvices_1.next();
                                    return [3 /*break*/, 11];
                                case 14: return [3 /*break*/, 17];
                                case 15:
                                    e_2_1 = _d.sent();
                                    e_2 = { error: e_2_1 };
                                    return [3 /*break*/, 17];
                                case 16:
                                    try {
                                        if (afterReturningAdvices_1_1 && !afterReturningAdvices_1_1.done && (_b = afterReturningAdvices_1.return)) _b.call(afterReturningAdvices_1);
                                    }
                                    finally { if (e_2) throw e_2.error; }
                                    return [7 /*endfinally*/];
                                case 17: return [2 /*return*/, returnValue];
                                case 18:
                                    error_1 = _d.sent();
                                    afterThrowsAdvices = context.container.getAll(aop_protocol_1.AfterThrowsAdvice) || [];
                                    _d.label = 19;
                                case 19:
                                    _d.trys.push([19, 24, 25, 26]);
                                    afterThrowsAdvices_1 = __values(afterThrowsAdvices), afterThrowsAdvices_1_1 = afterThrowsAdvices_1.next();
                                    _d.label = 20;
                                case 20:
                                    if (!!afterThrowsAdvices_1_1.done) return [3 /*break*/, 23];
                                    advice = afterThrowsAdvices_1_1.value;
                                    return [4 /*yield*/, advice.afterThrows(error_1, method, args, t)];
                                case 21:
                                    _d.sent();
                                    _d.label = 22;
                                case 22:
                                    afterThrowsAdvices_1_1 = afterThrowsAdvices_1.next();
                                    return [3 /*break*/, 20];
                                case 23: return [3 /*break*/, 26];
                                case 24:
                                    e_3_1 = _d.sent();
                                    e_3 = { error: e_3_1 };
                                    return [3 /*break*/, 26];
                                case 25:
                                    try {
                                        if (afterThrowsAdvices_1_1 && !afterThrowsAdvices_1_1.done && (_c = afterThrowsAdvices_1.return)) _c.call(afterThrowsAdvices_1);
                                    }
                                    finally { if (e_3) throw e_3.error; }
                                    return [7 /*endfinally*/];
                                case 26: throw error_1;
                                case 27: return [2 /*return*/];
                            }
                        });
                    });
                };
            }
            return func;
        }
    });
    proxy.target = t;
    t.proxyTarget = proxy;
    return proxy;
}
function applyComponentDecorator(option, target) {
    var e_4, _a;
    var defaultComponentOption = {
        id: target,
        scope: Scope.Singleton,
        rebind: false,
        proxy: false
    };
    var opt = __assign(__assign({}, defaultComponentOption), option);
    var ids = Array.isArray(opt.id) ? opt.id : opt.id !== target ? [opt.id, target] : [opt.id];
    var id = ids[0];
    var p = inversify_binding_decorators_1.fluentProvide(id);
    var whenOn;
    if (opt.scope === Scope.Singleton) {
        whenOn = p.inSingletonScope();
    }
    else if (opt.scope === Scope.Transient) {
        whenOn = p.inTransientScope();
    }
    if (opt.proxy) {
        whenOn.onActivation(doProxy).done(true)(target);
    }
    else {
        whenOn.done(true)(target);
    }
    ids.shift();
    if (ids.length > 0) {
        Reflect.defineMetadata(constants_1.METADATA_KEY.toService, id, target);
    }
    try {
        for (var ids_1 = __values(ids), ids_1_1 = ids_1.next(); !ids_1_1.done; ids_1_1 = ids_1.next()) {
            var sevice = ids_1_1.value;
            inversify_binding_decorators_1.fluentProvide(sevice).done(true)(target);
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (ids_1_1 && !ids_1_1.done && (_a = ids_1.return)) _a.call(ids_1);
        }
        finally { if (e_4) throw e_4.error; }
    }
    if (opt.rebind) {
        var metadata = true;
        Reflect.defineMetadata(constants_1.METADATA_KEY.rebind, metadata, target);
    }
}
exports.applyComponentDecorator = applyComponentDecorator;
//# sourceMappingURL=component.js.map