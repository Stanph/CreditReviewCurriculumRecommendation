"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var container_1 = require("../container");
exports.VALUE = Symbol('Value');
var ValueOption;
(function (ValueOption) {
    function is(option) {
        return option && (option.el !== undefined || option.detached !== undefined);
    }
    ValueOption.is = is;
})(ValueOption = exports.ValueOption || (exports.ValueOption = {}));
exports.Value = function (target, targetKey, index) {
    var option = getValueOption(target, targetKey, index);
    if (targetKey === undefined && index === undefined) {
        return function (t, tk, i) {
            applyValueDecorator(option, t, tk, i);
        };
    }
    else {
        applyValueDecorator(option, target, targetKey, index);
    }
};
function getValueOption(target, targetKey, index) {
    var option = {};
    if (targetKey === undefined) {
        if (ValueOption.is(target)) {
            option = __assign({}, target);
        }
        else if (target) {
            option = { el: target };
        }
    }
    return option;
}
exports.getValueOption = getValueOption;
function applyValueDecorator(option, target, targetKey, index) {
    var defaultAutowiredOption = {
        el: targetKey,
        detached: false
    };
    var opt = __assign(__assign({}, defaultAutowiredOption), option);
    if (opt.detached) {
        if (index !== undefined) {
            throw new Error("The " + target.constructor.name + " itself is not injected into the container, so the parameter injection of the constructor is not supported.");
        }
        createValueProperty(opt, target, targetKey);
        return;
    }
    var el = opt.el;
    inversify_1.inject(exports.VALUE)(target, targetKey, index);
    inversify_1.named(el)(target, targetKey, index);
}
exports.applyValueDecorator = applyValueDecorator;
function createValueProperty(option, target, property) {
    Object.defineProperty(target, property, {
        enumerable: true,
        get: function () {
            var container = container_1.ContainerProvider.provide();
            var el = option.el;
            return container.getNamed(exports.VALUE, el);
        }
    });
}
exports.createValueProperty = createValueProperty;
//# sourceMappingURL=value.js.map