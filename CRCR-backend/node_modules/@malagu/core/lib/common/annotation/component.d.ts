import { interfaces } from 'inversify';
export declare enum Scope {
    Request = 0,
    Singleton = 1,
    Transient = 2
}
export interface ComponentOption {
    id?: interfaces.ServiceIdentifier<any> | interfaces.ServiceIdentifier<any>[];
    scope?: Scope;
    rebind?: boolean;
    proxy?: boolean;
}
export declare namespace ComponentOption {
    function is(options: any): options is ComponentOption;
}
export interface ComponentDecorator {
    (option?: interfaces.ServiceIdentifier<any> | interfaces.ServiceIdentifier<any>[] | ComponentOption): (target: any) => any;
}
export declare const Component: ComponentDecorator;
export declare function getComponentOption(idOrOption?: interfaces.ServiceIdentifier<any> | interfaces.ServiceIdentifier<any>[] | ComponentOption): ComponentOption;
export declare function applyComponentDecorator(option: ComponentOption, target: any): void;
//# sourceMappingURL=component.d.ts.map