import { interfaces, Container } from 'inversify';
import { ServiceIdentifierOrFunc } from 'inversify/dts/annotation/inject';
export interface AutowiredOption {
    id?: ServiceIdentifierOrFunc;
    detached?: boolean;
}
export declare namespace AutowiredOption {
    function is(options: any): options is AutowiredOption;
}
export interface AutowiredDecorator {
    (option?: ServiceIdentifierOrFunc | AutowiredOption): (target: any, targetKey: string, index?: number) => any;
    (target: any, targetKey: string, index?: number): any;
}
export declare const Autowired: AutowiredDecorator;
export declare function getAutowiredOption(target: any, targetKey: string, index?: number): AutowiredOption;
export declare function applyAutowiredDecorator(option: AutowiredOption, target: any, targetKey: string, index?: number, doInject?: (id: ServiceIdentifierOrFunc, isMulti: boolean, t: any, k: string, i?: number | undefined) => void, doGetValue?: (id: interfaces.ServiceIdentifier<any>, isMulti: boolean, container: Container, t: any, property: string) => any): void;
export declare function createAutowiredProperty(option: AutowiredOption, isMulti: boolean, doGetValue: (id: interfaces.ServiceIdentifier<any>, isMulti: boolean, container: Container, target: any, property: string) => any, target: any, property: string): void;
//# sourceMappingURL=autowired.d.ts.map