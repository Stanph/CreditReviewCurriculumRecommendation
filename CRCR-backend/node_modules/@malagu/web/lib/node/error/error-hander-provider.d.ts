import { Context } from '../context';
import { ErrorHandler } from './error-protocol';
import { HttpError } from './http-error';
export declare abstract class AbstractErrorHandler implements ErrorHandler {
    readonly priority: number;
    canHandle(ctx: Context, err: Error): Promise<boolean>;
    handle(ctx: Context, err: Error): Promise<void>;
    doHandle(ctx: Context, err: Error): Promise<void>;
}
export declare class DefaultErrorHandler extends AbstractErrorHandler {
}
export declare class HttpErrorHandler implements ErrorHandler {
    readonly priority: number;
    canHandle(ctx: Context, err: Error): Promise<boolean>;
    handle(ctx: Context, err: HttpError): Promise<void>;
}
export declare class ValidationErrorsHandler implements ErrorHandler {
    readonly priority: number;
    canHandle(ctx: Context, err: Error): Promise<boolean>;
    handle(ctx: Context, err: HttpError): Promise<void>;
}
export declare class ErrorHandlerProvider {
    protected readonly handlers: ErrorHandler[];
    protected prioritized: ErrorHandler[];
    constructor(handlers: ErrorHandler[]);
    provide(): ErrorHandler[];
}
//# sourceMappingURL=error-hander-provider.d.ts.map