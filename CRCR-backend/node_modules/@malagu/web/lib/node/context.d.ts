import { Session } from './session/session-protocol';
import { Cookies } from './cookies';
import { Request, Response } from './http/http-protocol';
export declare enum AttributeScope {
    App = 0,
    Request = 1,
    Session = 2
}
export declare const CURRENT_CONTEXT_REQUEST_KEY = "CurrentContextRequest";
export declare const CURRENT_COOKIES_REQUEST_KEY = "CurrentCookiesRequest";
export declare const CURRENT_SESSION_REQUEST_KEY = "CurrentSessionRequest";
export declare const CURRENT_TRACE_ID_REQUEST_KEY = "CurrentTraceIdRequest";
export interface Context {
    [key: string]: any;
    readonly request: Request;
    readonly response: Response;
}
export declare namespace Context {
    function run(fn: (...args: any[]) => void): void;
    function setCurrent(context: Context): void;
    function getCurrent<T extends Context>(): T;
    function getRequest(): Request;
    function getResponse(): Response;
    function getCookies(): Cookies;
    function setCookies(cookies: Cookies): void;
    function getSession(): Session;
    function setSession(session: Session): void;
    function setTraceId(traceId: string): void;
    function getTraceId(): string;
    function setAttr(key: string, value: any, scope?: AttributeScope): void;
    function getAttr<T>(key: string, scope?: AttributeScope): T;
}
export declare class HttpContext implements Context {
    request: Request;
    response: Response;
    [key: string]: any;
    constructor(request: Request, response: Response);
}
//# sourceMappingURL=context.d.ts.map