"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var controller_1 = require("../annotation/controller");
var constants_1 = require("../constants");
var core_1 = require("@malagu/core");
var web_1 = require("@malagu/web");
var proxy_util_1 = require("@malagu/core/lib/common/utils/proxy-util");
var RouteBuilder = /** @class */ (function () {
    function RouteBuilder() {
        this.controllers = [];
    }
    RouteBuilder.prototype.build = function () {
        return __awaiter(this, void 0, void 0, function () {
            var mapping, errorMapping, _a, _b, controller, targetConstructor, controllerMetadata, e_1_1;
            var e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        mapping = new Map();
                        errorMapping = new Map();
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 7, 8, 9]);
                        _a = __values(this.controllers), _b = _a.next();
                        _d.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 6];
                        controller = _b.value;
                        targetConstructor = proxy_util_1.getTargetClass(controller);
                        controllerMetadata = Reflect.getOwnMetadata(constants_1.METADATA_KEY.controller, targetConstructor);
                        return [4 /*yield*/, this.doBuildRouteMap(mapping, targetConstructor, controller, controllerMetadata)];
                    case 3:
                        _d.sent();
                        return [4 /*yield*/, this.doBuildErrorRouteMap(errorMapping, targetConstructor, controller, controllerMetadata)];
                    case 4:
                        _d.sent();
                        _d.label = 5;
                    case 5:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 9: return [2 /*return*/, {
                            mapping: mapping,
                            errorMapping: errorMapping
                        }];
                }
            });
        });
    };
    RouteBuilder.prototype.doBuildRouteMap = function (mapping, targetConstructor, controller, controllerMetadata) {
        return __awaiter(this, void 0, void 0, function () {
            var methodMetadata, methodMetadata_1, methodMetadata_1_1, metadata, routeOptions, m, method, pathMap, path, _a, e_2_1;
            var e_2, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        methodMetadata = core_1.getOwnMetadata(constants_1.METADATA_KEY.controllerMethod, targetConstructor);
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 9, 10, 11]);
                        methodMetadata_1 = __values(methodMetadata), methodMetadata_1_1 = methodMetadata_1.next();
                        _c.label = 2;
                    case 2:
                        if (!!methodMetadata_1_1.done) return [3 /*break*/, 8];
                        metadata = methodMetadata_1_1.value;
                        routeOptions = (typeof metadata.options === 'string' || metadata.options instanceof RegExp) ? { path: metadata.options } : metadata.options;
                        m = __assign({}, metadata);
                        method = m.method;
                        m.target = controller;
                        pathMap = mapping.get(method);
                        if (!pathMap) {
                            pathMap = new Map();
                            mapping.set(method, pathMap);
                        }
                        path = routeOptions.path;
                        if (!(typeof path === 'string')) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.pathResolver.resolve(controllerMetadata.path, path)];
                    case 3:
                        path = _c.sent();
                        return [3 /*break*/, 6];
                    case 4:
                        if (!(path instanceof RegExp)) return [3 /*break*/, 6];
                        if (!controllerMetadata.path) return [3 /*break*/, 6];
                        _a = RegExp.bind;
                        return [4 /*yield*/, this.pathResolver.resolve(controllerMetadata.path, path.source)];
                    case 5:
                        path = new (_a.apply(RegExp, [void 0, _c.sent()]))();
                        _c.label = 6;
                    case 6:
                        pathMap.set(path, __assign({ controllerMetadata: controllerMetadata, methodMetadata: m }, this.doRouteMetadata(targetConstructor, m.key)));
                        _c.label = 7;
                    case 7:
                        methodMetadata_1_1 = methodMetadata_1.next();
                        return [3 /*break*/, 2];
                    case 8: return [3 /*break*/, 11];
                    case 9:
                        e_2_1 = _c.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 11];
                    case 10:
                        try {
                            if (methodMetadata_1_1 && !methodMetadata_1_1.done && (_b = methodMetadata_1.return)) _b.call(methodMetadata_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    RouteBuilder.prototype.doBuildErrorRouteMap = function (errorMapping, targetConstructor, controller, controllerMetadata) {
        return __awaiter(this, void 0, void 0, function () {
            var methodMetadata, methodMetadata_2, methodMetadata_2_1, metadata, m, _a, _b, errorType;
            var e_3, _c, e_4, _d;
            return __generator(this, function (_e) {
                methodMetadata = core_1.getOwnMetadata(constants_1.METADATA_KEY.controllerCatch, targetConstructor);
                try {
                    for (methodMetadata_2 = __values(methodMetadata), methodMetadata_2_1 = methodMetadata_2.next(); !methodMetadata_2_1.done; methodMetadata_2_1 = methodMetadata_2.next()) {
                        metadata = methodMetadata_2_1.value;
                        m = __assign({}, metadata);
                        m.target = controller;
                        try {
                            for (_a = (e_4 = void 0, __values(metadata.errorTypes)), _b = _a.next(); !_b.done; _b = _a.next()) {
                                errorType = _b.value;
                                errorMapping.set(errorType, __assign({ controllerMetadata: controllerMetadata, methodMetadata: m }, this.doRouteMetadata(targetConstructor, m.key)));
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (methodMetadata_2_1 && !methodMetadata_2_1.done && (_c = methodMetadata_2.return)) _c.call(methodMetadata_2);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                return [2 /*return*/];
            });
        });
    };
    RouteBuilder.prototype.doRouteMetadata = function (targetConstructor, method) {
        return {
            paramMetadata: core_1.getOwnMetadata(constants_1.METADATA_KEY.controllerParam, targetConstructor, method),
            bodyMetadata: core_1.getOwnMetadata(constants_1.METADATA_KEY.controllerBody, targetConstructor, method),
            queryMetadata: core_1.getOwnMetadata(constants_1.METADATA_KEY.controllerQuery, targetConstructor, method),
            requestHeaderMetadata: core_1.getOwnMetadata(constants_1.METADATA_KEY.controllerRequestHeader, targetConstructor, method),
            responseHeaderMetadata: core_1.getOwnMetadata(constants_1.METADATA_KEY.controllerResponseHeader, targetConstructor, method),
            requestCookieMetadata: core_1.getOwnMetadata(constants_1.METADATA_KEY.controllerRequestCookie, targetConstructor, method),
            responseCookieMetadata: core_1.getOwnMetadata(constants_1.METADATA_KEY.controllerResponseCookie, targetConstructor, method),
            requestSessionMetadata: core_1.getOwnMetadata(constants_1.METADATA_KEY.controllerRequestSession, targetConstructor, method),
            responseSessionMetadata: core_1.getOwnMetadata(constants_1.METADATA_KEY.controllerResponseSession, targetConstructor, method),
            viewMetadata: core_1.getOwnMetadata(constants_1.METADATA_KEY.controllerView, targetConstructor, method) || {}
        };
    };
    __decorate([
        core_1.Autowired(controller_1.CONTROLLER), core_1.Optional,
        __metadata("design:type", Array)
    ], RouteBuilder.prototype, "controllers", void 0);
    __decorate([
        core_1.Autowired(web_1.PathResolver),
        __metadata("design:type", Object)
    ], RouteBuilder.prototype, "pathResolver", void 0);
    RouteBuilder = __decorate([
        core_1.Component()
    ], RouteBuilder);
    return RouteBuilder;
}());
exports.RouteBuilder = RouteBuilder;
//# sourceMappingURL=route-builder.js.map