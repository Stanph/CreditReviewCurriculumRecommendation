import { PathResolver } from '@malagu/web';
import { RequestMatcher, HandlerAdapter } from '@malagu/web/lib/node';
import { ViewResolver, ResponseResolverProvider, MethodArgsResolverProvider } from '../resolver';
import { RouteMetadataMatcher } from './handler-protocol';
import { PipeManager } from '@malagu/core';
export declare class MvcHandlerAdapter implements HandlerAdapter {
    readonly priority = 2000;
    protected readonly methodArgsResolverProvider: MethodArgsResolverProvider;
    protected readonly responseResolverProvider: ResponseResolverProvider;
    protected readonly viewResolver: ViewResolver;
    protected readonly requestMatcher: RequestMatcher;
    protected readonly pathResolver: PathResolver;
    protected readonly pipeManager: PipeManager;
    protected readonly mvcPath: string;
    protected readonly routeMetadataMatcher: RouteMetadataMatcher;
    protected resolveMethodArgs(metadata: any): Promise<any[]>;
    protected resolveResponse(metadata: any): Promise<void>;
    handle(): Promise<void>;
    protected doHandle(metadata: any, err?: any): Promise<void>;
    protected getErrorMetadata(error: Error): Promise<import("./handler-protocol").RouteMetadata>;
    canHandle(): Promise<boolean>;
}
//# sourceMappingURL=handler-adapter.d.ts.map