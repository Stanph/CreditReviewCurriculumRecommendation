"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var resolver_protocol_1 = require("./resolver-protocol");
var node_1 = require("@malagu/web/lib/node");
var core_1 = require("@malagu/core");
var handler_1 = require("../handler");
var BodyMethodArgsResolver = /** @class */ (function () {
    function BodyMethodArgsResolver() {
        this.priority = 100;
    }
    BodyMethodArgsResolver.prototype.resolve = function (metadata, args) {
        return __awaiter(this, void 0, void 0, function () {
            var body, bodyMetadatas, bodyMetadatas_1, bodyMetadatas_1_1, m;
            var e_1, _a;
            return __generator(this, function (_b) {
                body = node_1.Context.getCurrent().request.body;
                bodyMetadatas = metadata.bodyMetadata;
                if (bodyMetadatas && body !== undefined) {
                    try {
                        for (bodyMetadatas_1 = __values(bodyMetadatas), bodyMetadatas_1_1 = bodyMetadatas_1.next(); !bodyMetadatas_1_1.done; bodyMetadatas_1_1 = bodyMetadatas_1.next()) {
                            m = bodyMetadatas_1_1.value;
                            args[m.parameterIndex] = m.name ? body[m.name] : body;
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (bodyMetadatas_1_1 && !bodyMetadatas_1_1.done && (_a = bodyMetadatas_1.return)) _a.call(bodyMetadatas_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    BodyMethodArgsResolver = __decorate([
        core_1.Component(resolver_protocol_1.MethodArgsResolver)
    ], BodyMethodArgsResolver);
    return BodyMethodArgsResolver;
}());
exports.BodyMethodArgsResolver = BodyMethodArgsResolver;
var HeaderMethodArgsResolver = /** @class */ (function () {
    function HeaderMethodArgsResolver() {
        this.priority = 200;
    }
    HeaderMethodArgsResolver.prototype.resolve = function (metadata, args) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, headerMetadatas, headerMetadatas_1, headerMetadatas_1_1, m;
            var e_2, _a;
            return __generator(this, function (_b) {
                headers = node_1.Context.getCurrent().request.headers;
                headerMetadatas = metadata.requestHeaderMetadata;
                if (headerMetadatas && headers !== undefined) {
                    try {
                        for (headerMetadatas_1 = __values(headerMetadatas), headerMetadatas_1_1 = headerMetadatas_1.next(); !headerMetadatas_1_1.done; headerMetadatas_1_1 = headerMetadatas_1.next()) {
                            m = headerMetadatas_1_1.value;
                            args[m.parameterIndex] = m.name ? headers[m.name] : headers;
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (headerMetadatas_1_1 && !headerMetadatas_1_1.done && (_a = headerMetadatas_1.return)) _a.call(headerMetadatas_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    HeaderMethodArgsResolver = __decorate([
        core_1.Component(resolver_protocol_1.MethodArgsResolver)
    ], HeaderMethodArgsResolver);
    return HeaderMethodArgsResolver;
}());
exports.HeaderMethodArgsResolver = HeaderMethodArgsResolver;
var ParamMethodArgsResolver = /** @class */ (function () {
    function ParamMethodArgsResolver() {
        this.priority = 300;
    }
    ParamMethodArgsResolver.prototype.resolve = function (metadata, args) {
        return __awaiter(this, void 0, void 0, function () {
            var params, paramMetadatas, paramMetadatas_1, paramMetadatas_1_1, m;
            var e_3, _a;
            return __generator(this, function (_b) {
                params = node_1.Context.getAttr(handler_1.PATH_PARMAS_ATTR);
                paramMetadatas = metadata.paramMetadata;
                if (paramMetadatas && params) {
                    try {
                        for (paramMetadatas_1 = __values(paramMetadatas), paramMetadatas_1_1 = paramMetadatas_1.next(); !paramMetadatas_1_1.done; paramMetadatas_1_1 = paramMetadatas_1.next()) {
                            m = paramMetadatas_1_1.value;
                            args[m.parameterIndex] = m.name ? params[m.name] : params;
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (paramMetadatas_1_1 && !paramMetadatas_1_1.done && (_a = paramMetadatas_1.return)) _a.call(paramMetadatas_1);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    ParamMethodArgsResolver = __decorate([
        core_1.Component(resolver_protocol_1.MethodArgsResolver)
    ], ParamMethodArgsResolver);
    return ParamMethodArgsResolver;
}());
exports.ParamMethodArgsResolver = ParamMethodArgsResolver;
var QueryMethodArgsResolver = /** @class */ (function () {
    function QueryMethodArgsResolver() {
        this.priority = 400;
    }
    QueryMethodArgsResolver.prototype.resolve = function (metadata, args) {
        return __awaiter(this, void 0, void 0, function () {
            var query, queryMetadatas, queryMetadatas_1, queryMetadatas_1_1, m;
            var e_4, _a;
            return __generator(this, function (_b) {
                query = node_1.Context.getCurrent().request.query;
                queryMetadatas = metadata.queryMetadata;
                if (queryMetadatas && query !== undefined) {
                    try {
                        for (queryMetadatas_1 = __values(queryMetadatas), queryMetadatas_1_1 = queryMetadatas_1.next(); !queryMetadatas_1_1.done; queryMetadatas_1_1 = queryMetadatas_1.next()) {
                            m = queryMetadatas_1_1.value;
                            args[m.parameterIndex] = m.name ? query[m.name] : query;
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (queryMetadatas_1_1 && !queryMetadatas_1_1.done && (_a = queryMetadatas_1.return)) _a.call(queryMetadatas_1);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    QueryMethodArgsResolver = __decorate([
        core_1.Component(resolver_protocol_1.MethodArgsResolver)
    ], QueryMethodArgsResolver);
    return QueryMethodArgsResolver;
}());
exports.QueryMethodArgsResolver = QueryMethodArgsResolver;
var CookieMethodArgsResolver = /** @class */ (function () {
    function CookieMethodArgsResolver() {
        this.priority = 500;
    }
    CookieMethodArgsResolver.prototype.resolve = function (metadata, args) {
        return __awaiter(this, void 0, void 0, function () {
            var cookies, cookieMetadatas, cookieMetadatas_1, cookieMetadatas_1_1, m;
            var e_5, _a;
            return __generator(this, function (_b) {
                cookies = node_1.Context.getCookies();
                cookieMetadatas = metadata.requestCookieMetadata;
                if (cookieMetadatas && cookies !== undefined) {
                    try {
                        for (cookieMetadatas_1 = __values(cookieMetadatas), cookieMetadatas_1_1 = cookieMetadatas_1.next(); !cookieMetadatas_1_1.done; cookieMetadatas_1_1 = cookieMetadatas_1.next()) {
                            m = cookieMetadatas_1_1.value;
                            args[m.parameterIndex] = m.name ? cookies.get(m.name) : cookies;
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (cookieMetadatas_1_1 && !cookieMetadatas_1_1.done && (_a = cookieMetadatas_1.return)) _a.call(cookieMetadatas_1);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    CookieMethodArgsResolver = __decorate([
        core_1.Component(resolver_protocol_1.MethodArgsResolver)
    ], CookieMethodArgsResolver);
    return CookieMethodArgsResolver;
}());
exports.CookieMethodArgsResolver = CookieMethodArgsResolver;
var SessionMethodArgsResolver = /** @class */ (function () {
    function SessionMethodArgsResolver() {
        this.priority = 600;
    }
    SessionMethodArgsResolver.prototype.resolve = function (metadata, args) {
        return __awaiter(this, void 0, void 0, function () {
            var session, sessionMetadatas, sessionMetadatas_1, sessionMetadatas_1_1, m;
            var e_6, _a;
            return __generator(this, function (_b) {
                session = node_1.Context.getSession();
                sessionMetadatas = metadata.requestSessionMetadata;
                if (sessionMetadatas && session !== undefined) {
                    try {
                        for (sessionMetadatas_1 = __values(sessionMetadatas), sessionMetadatas_1_1 = sessionMetadatas_1.next(); !sessionMetadatas_1_1.done; sessionMetadatas_1_1 = sessionMetadatas_1.next()) {
                            m = sessionMetadatas_1_1.value;
                            args[m.parameterIndex] = m.name ? session[m.name] : session;
                        }
                    }
                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
                    finally {
                        try {
                            if (sessionMetadatas_1_1 && !sessionMetadatas_1_1.done && (_a = sessionMetadatas_1.return)) _a.call(sessionMetadatas_1);
                        }
                        finally { if (e_6) throw e_6.error; }
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    SessionMethodArgsResolver = __decorate([
        core_1.Component(resolver_protocol_1.MethodArgsResolver)
    ], SessionMethodArgsResolver);
    return SessionMethodArgsResolver;
}());
exports.SessionMethodArgsResolver = SessionMethodArgsResolver;
//# sourceMappingURL=method-args-resolver.js.map