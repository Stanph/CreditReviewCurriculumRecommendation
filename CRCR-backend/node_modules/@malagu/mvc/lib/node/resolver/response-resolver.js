"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var resolver_protocol_1 = require("./resolver-protocol");
var node_1 = require("@malagu/web/lib/node");
var core_1 = require("@malagu/core");
var HeaderResponseResolver = /** @class */ (function () {
    function HeaderResponseResolver() {
        this.priority = 500;
    }
    HeaderResponseResolver.prototype.resolve = function (metadata) {
        return __awaiter(this, void 0, void 0, function () {
            var response, headerMetadatas, headerMetadatas_1, headerMetadatas_1_1, m;
            var e_1, _a;
            return __generator(this, function (_b) {
                response = node_1.Context.getCurrent().response;
                headerMetadatas = metadata.responseHeaderMetadata;
                if (headerMetadatas) {
                    try {
                        for (headerMetadatas_1 = __values(headerMetadatas), headerMetadatas_1_1 = headerMetadatas_1.next(); !headerMetadatas_1_1.done; headerMetadatas_1_1 = headerMetadatas_1.next()) {
                            m = headerMetadatas_1_1.value;
                            response.setHeader(m.name, m.value);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (headerMetadatas_1_1 && !headerMetadatas_1_1.done && (_a = headerMetadatas_1.return)) _a.call(headerMetadatas_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    HeaderResponseResolver = __decorate([
        core_1.Component(resolver_protocol_1.ResponseResolver)
    ], HeaderResponseResolver);
    return HeaderResponseResolver;
}());
exports.HeaderResponseResolver = HeaderResponseResolver;
var CookieResponseResolver = /** @class */ (function () {
    function CookieResponseResolver() {
        this.priority = 500;
    }
    CookieResponseResolver.prototype.resolve = function (metadata) {
        return __awaiter(this, void 0, void 0, function () {
            var cookies, cookieMetadatas, cookieMetadatas_1, cookieMetadatas_1_1, m;
            var e_2, _a;
            return __generator(this, function (_b) {
                cookies = node_1.Context.getCookies();
                cookieMetadatas = metadata.responseCookieMetadata;
                if (cookieMetadatas && cookies) {
                    try {
                        for (cookieMetadatas_1 = __values(cookieMetadatas), cookieMetadatas_1_1 = cookieMetadatas_1.next(); !cookieMetadatas_1_1.done; cookieMetadatas_1_1 = cookieMetadatas_1.next()) {
                            m = cookieMetadatas_1_1.value;
                            cookies.set(m.name, m.value);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (cookieMetadatas_1_1 && !cookieMetadatas_1_1.done && (_a = cookieMetadatas_1.return)) _a.call(cookieMetadatas_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    CookieResponseResolver = __decorate([
        core_1.Component(resolver_protocol_1.ResponseResolver)
    ], CookieResponseResolver);
    return CookieResponseResolver;
}());
exports.CookieResponseResolver = CookieResponseResolver;
var SessionResponseResolver = /** @class */ (function () {
    function SessionResponseResolver() {
        this.priority = 500;
    }
    SessionResponseResolver.prototype.resolve = function (metadata) {
        return __awaiter(this, void 0, void 0, function () {
            var session, sessionMetadatas, sessionMetadatas_1, sessionMetadatas_1_1, m;
            var e_3, _a;
            return __generator(this, function (_b) {
                session = node_1.Context.getSession();
                sessionMetadatas = metadata.responseSessionMetadata;
                if (sessionMetadatas && session) {
                    try {
                        for (sessionMetadatas_1 = __values(sessionMetadatas), sessionMetadatas_1_1 = sessionMetadatas_1.next(); !sessionMetadatas_1_1.done; sessionMetadatas_1_1 = sessionMetadatas_1.next()) {
                            m = sessionMetadatas_1_1.value;
                            session[m.name] = m.value;
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (sessionMetadatas_1_1 && !sessionMetadatas_1_1.done && (_a = sessionMetadatas_1.return)) _a.call(sessionMetadatas_1);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    SessionResponseResolver = __decorate([
        core_1.Component(resolver_protocol_1.ResponseResolver)
    ], SessionResponseResolver);
    return SessionResponseResolver;
}());
exports.SessionResponseResolver = SessionResponseResolver;
//# sourceMappingURL=response-resolver.js.map