"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var os_1 = require("os");
var path_1 = require("path");
var fs_extra_1 = require("fs-extra");
var inquirer_1 = require("inquirer");
var yaml = require('js-yaml');
var dotenv = require('dotenv').config();
var ProfileProvider = /** @class */ (function () {
    function ProfileProvider() {
    }
    ProfileProvider.prototype.provide = function (quiet) {
        if (quiet === void 0) { quiet = false; }
        return __awaiter(this, void 0, void 0, function () {
            var profile;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getProfile()];
                    case 1:
                        profile = _a.sent();
                        if (!(!quiet && !this.isAllRequiredExist(profile))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.promptForProfile()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, this.getProfile()];
                    case 3: return [2 /*return*/, profile];
                }
            });
        });
    };
    ProfileProvider.prototype.getProfile = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _a = [{}];
                        return [4 /*yield*/, this.getProfileFromFile()];
                    case 1:
                        _b = [__assign.apply(void 0, _a.concat([_f.sent()]))];
                        _c = this.cleanObject;
                        return [4 /*yield*/, this.getProfileFromEnv()];
                    case 2:
                        _d = [__assign.apply(void 0, _b.concat([_c.apply(this, [_f.sent()])]))];
                        _e = this.cleanObject;
                        return [4 /*yield*/, this.getProfileFromDotEnv()];
                    case 3: return [2 /*return*/, __assign.apply(void 0, _d.concat([_e.apply(this, [_f.sent()])]))];
                }
            });
        });
    };
    ProfileProvider.prototype.isAllRequiredExist = function (profile) {
        return profile.accessKeyId !== undefined && profile.accessKeySecret !== undefined && profile.accountId !== undefined;
    };
    ProfileProvider.prototype.extract = function (regex, endpoint) {
        var matchs = endpoint.match(regex);
        if (matchs) {
            return matchs[1];
        }
        return undefined;
    };
    ProfileProvider.prototype.cleanObject = function (target) {
        for (var key in target) {
            if (target.hasOwnProperty(key)) {
                var value = target[key];
                if (!value) {
                    delete target[key];
                }
            }
        }
        return target;
    };
    ProfileProvider.prototype.extractProfile = function (endpoint) {
        return {
            accountId: this.extract(/^https?:\/\/([^.]+)\..+$/, endpoint),
            defaultRegion: this.extract(/^https?:\/\/[^.]+\.([^.]+)\..+$/, endpoint),
            protocol: this.extractProtocol(endpoint)
        };
    };
    ProfileProvider.prototype.extractProtocol = function (endpoint) {
        return endpoint.startsWith('https') ? 'https' : 'http';
    };
    ProfileProvider.prototype.getProfilePath = function () {
        return path_1.resolve(os_1.homedir(), '.fcli', 'config.yaml');
    };
    ProfileProvider.prototype.getProfileFromDotEnv = function () {
        return __awaiter(this, void 0, void 0, function () {
            var profile, parsed;
            return __generator(this, function (_a) {
                profile = {};
                if (dotenv) {
                    if (dotenv.error) {
                        return [2 /*return*/, profile];
                    }
                    parsed = dotenv.parsed;
                    profile.accountId = parsed['ACCOUNT_ID'];
                    profile.defaultRegion = parsed['DEFAULT_REGION'];
                    profile.defaultRegion = parsed['REGION'];
                    profile.accessKeyId = parsed['ACCESS_KEY_ID'];
                    profile.accessKeySecret = parsed['ACCESS_KEY_SECRET'];
                }
                return [2 /*return*/, profile];
            });
        });
    };
    ProfileProvider.prototype.getProfileFromFile = function () {
        return __awaiter(this, void 0, void 0, function () {
            var profilePath, isExists, profile, profContent, profYml;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        profilePath = this.getProfilePath();
                        isExists = fs_extra_1.existsSync(profilePath);
                        if (!isExists) {
                            return [2 /*return*/, {}];
                        }
                        return [4 /*yield*/, fs_extra_1.readFile(profilePath, 'utf8')];
                    case 1:
                        profContent = _a.sent();
                        profYml = yaml.safeLoad(profContent);
                        profile = {
                            accessKeyId: profYml.access_key_id,
                            accessKeySecret: profYml.access_key_secret
                        };
                        if (profYml.endpoint) {
                            profile = __assign(__assign({}, this.extractProfile(profYml.endpoint)), this.cleanObject(profile));
                        }
                        return [2 /*return*/, profile];
                }
            });
        });
    };
    ProfileProvider.prototype.getProfileFromEnv = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, {
                        accountId: process.env.ACCOUNT_ID,
                        defaultRegion: process.env.REGION || process.env.DEFAULT_REGION,
                        accessKeyId: process.env.ACCESS_KEY_ID,
                        accessKeySecret: process.env.ACCESS_KEY_SECRET
                    }];
            });
        });
    };
    ProfileProvider.prototype.mark = function (source) {
        if (source) {
            var subStr = source.slice(-4);
            return "***********" + subStr;
        }
    };
    ProfileProvider.prototype.promptForProfile = function () {
        return __awaiter(this, void 0, void 0, function () {
            var profile, markedAccessKeyId, markedAccessKeySecret, questions, newProfile, profilePath, isExists, profYml, profContent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getProfileFromFile()];
                    case 1:
                        profile = _a.sent();
                        markedAccessKeyId = this.mark(profile.accessKeyId);
                        markedAccessKeySecret = this.mark(profile.accessKeySecret);
                        questions = [
                            {
                                type: 'input',
                                name: 'accountId',
                                message: 'Aliyun Account ID',
                                default: profile.accountId
                            },
                            {
                                type: 'input',
                                name: 'accessKeyId',
                                message: 'Aliyun Access Key ID',
                                default: markedAccessKeyId
                            },
                            {
                                type: 'input',
                                name: 'accessKeySecret',
                                message: 'Aliyun Access Key Secret',
                                default: markedAccessKeySecret
                            },
                            {
                                type: 'list',
                                name: 'defaultRegion',
                                message: 'Default region name',
                                choices: ['cn-qingdao', 'cn-beijing', 'cn-zhangjiakou',
                                    'cn-hangzhou', 'cn-shanghai', 'cn-shenzhen', 'cn-huhehaote',
                                    'cn-hongkong', 'ap-southeast-1', 'ap-southeast-2',
                                    'ap-northeast-1', 'us-west-1', 'us-east-1',
                                    'eu-central-1', 'ap-south-1'],
                                default: profile.defaultRegion
                            }
                        ];
                        return [4 /*yield*/, inquirer_1.prompt(questions)];
                    case 2:
                        newProfile = _a.sent();
                        if (newProfile.accessKeyId === markedAccessKeyId) {
                            newProfile.accessKeyId = profile.accessKeyId;
                        }
                        if (newProfile.accessKeySecret === markedAccessKeySecret) {
                            newProfile.accessKeySecret = profile.accessKeySecret;
                        }
                        profilePath = this.getProfilePath();
                        isExists = fs_extra_1.existsSync(profilePath);
                        if (!isExists) return [3 /*break*/, 4];
                        return [4 /*yield*/, fs_extra_1.readFile(profilePath, 'utf8')];
                    case 3:
                        profContent = _a.sent();
                        profYml = yaml.safeLoad(profContent, {
                            schema: yaml.JSON_SCHEMA
                        });
                        profYml.endpoint = "https://" + newProfile.accountId + "." + newProfile.defaultRegion + ".fc.aliyuncs.com";
                        profYml.access_key_id = newProfile.accessKeyId;
                        profYml.access_key_secret = newProfile.accessKeySecret;
                        profYml.sls_endpoint = newProfile.defaultRegion + ".log.aliyuncs.com";
                        return [3 /*break*/, 6];
                    case 4:
                        profYml = {
                            endpoint: "https://" + newProfile.accountId + "." + newProfile.defaultRegion + ".fc.aliyuncs.com",
                            api_version: '2016-08-15',
                            access_key_id: newProfile.accessKeyId,
                            access_key_secret: newProfile.accessKeySecret,
                            security_token: '',
                            debug: false,
                            sls_endpoint: newProfile.defaultRegion + ".log.aliyuncs.com",
                        };
                        return [4 /*yield*/, fs_extra_1.ensureFile(profilePath)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [4 /*yield*/, fs_extra_1.writeFile(profilePath, yaml.dump(profYml))];
                    case 7:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return ProfileProvider;
}());
exports.ProfileProvider = ProfileProvider;
//# sourceMappingURL=profile-provider.js.map