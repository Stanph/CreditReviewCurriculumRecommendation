"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var cli_1 = require("@malagu/cli");
var profile_provider_1 = require("./profile-provider");
var path_1 = require("path");
var mergeWith = require("lodash.mergewith");
var fs_extra_1 = require("fs-extra");
var FCClient = require('@alicloud/fc2');
var OSSClient = require('ali-oss');
var JSZip = require("jszip");
var ora = require("ora");
var CloudAPI = require('@alicloud/cloudapi');
var Ram = require('@alicloud/ram');
var chalk = require('chalk');
var client;
var ossClient;
var profile;
var frontendCodeDir;
var devAlias;
var prodAlias;
exports.default = (function (context) { return __awaiter(void 0, void 0, void 0, function () {
    var pkg, configurations, defaultDeployConfig, appBackendConfig, deployConfig, profileProvider, _a, configurations_1, configurations_1_1, c, e_1_1;
    var e_1, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                pkg = context.pkg, configurations = context.configurations;
                defaultDeployConfig = {
                    type: 'http',
                    bucket: "malagu-" + pkg.pkg.name,
                    service: {
                        name: 'malagu'
                    },
                    funciton: {
                        name: pkg.pkg.name,
                        handler: 'index.handler',
                        memorySize: 128,
                        runtime: 'nodejs10',
                        initializer: 'index.init',
                    },
                    trigger: {
                        name: pkg.pkg.name,
                        triggerType: 'http',
                        triggerConfig: {
                            authType: 'anonymous',
                            methods: ['GET', 'POST', 'PUT', 'DELETE']
                        }
                    },
                    apiGateway: {
                        stage: 'RELEASE',
                        group: {
                            name: 'malagu'
                        },
                        api: {
                            name: 'malagu',
                            path: '/api'
                        }
                    },
                    devAlias: 'dev',
                    prodAlias: 'prod'
                };
                appBackendConfig = pkg.backendConfig;
                deployConfig = mergeWith(defaultDeployConfig, appBackendConfig.deployConfig, cli_1.customizer);
                profileProvider = new profile_provider_1.ProfileProvider();
                if (!deployConfig.profile) return [3 /*break*/, 1];
                _a = deployConfig.profile;
                return [3 /*break*/, 3];
            case 1: return [4 /*yield*/, profileProvider.provide()];
            case 2:
                _a = _c.sent();
                _c.label = 3;
            case 3:
                profile = _a;
                devAlias = deployConfig.devAlias;
                prodAlias = deployConfig.prodAlias;
                _c.label = 4;
            case 4:
                _c.trys.push([4, 11, 12, 13]);
                configurations_1 = __values(configurations), configurations_1_1 = configurations_1.next();
                _c.label = 5;
            case 5:
                if (!!configurations_1_1.done) return [3 /*break*/, 10];
                c = configurations_1_1.value;
                if (!(c.name === cli_1.FRONTEND_TARGET)) return [3 /*break*/, 7];
                return [4 /*yield*/, deployFrontend(context, deployConfig)];
            case 6:
                _c.sent();
                return [3 /*break*/, 9];
            case 7: return [4 /*yield*/, deployBackend(context, deployConfig)];
            case 8:
                _c.sent();
                _c.label = 9;
            case 9:
                configurations_1_1 = configurations_1.next();
                return [3 /*break*/, 5];
            case 10: return [3 /*break*/, 13];
            case 11:
                e_1_1 = _c.sent();
                e_1 = { error: e_1_1 };
                return [3 /*break*/, 13];
            case 12:
                try {
                    if (configurations_1_1 && !configurations_1_1.done && (_b = configurations_1.return)) _b.call(configurations_1);
                }
                finally { if (e_1) throw e_1.error; }
                return [7 /*endfinally*/];
            case 13: return [2 /*return*/];
        }
    });
}); });
function deployFrontend(context, deployConfig) {
    return __awaiter(this, void 0, void 0, function () {
        var pkg, prod, bucket;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    pkg = context.pkg, prod = context.prod;
                    frontendCodeDir = path_1.resolve(cli_1.getHomePath(pkg, cli_1.FRONTEND_TARGET), 'dist');
                    if (!fs_extra_1.existsSync(frontendCodeDir)) {
                        console.log(chalk(templateObject_1 || (templateObject_1 = __makeTemplateObject(["{yellow Please build frontend first with \"malagu build\"}"], ["{yellow Please build frontend first with \"malagu build\"}"]))));
                        return [2 /*return*/];
                    }
                    console.log("Deploying " + chalk.yellow('frontend') + " to Object Storage Service...");
                    bucket = deployConfig.bucket;
                    ossClient = new OSSClient({
                        region: "oss-" + profile.defaultRegion,
                        accessKeyId: profile.accessKeyId,
                        accessKeySecret: profile.accessKeySecret
                    });
                    return [4 /*yield*/, uploadFrontendCode(frontendCodeDir, bucket, new Date().toISOString())];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, uploadFrontendCode(frontendCodeDir, bucket + "-" + devAlias)];
                case 2:
                    _a.sent();
                    if (!prod) return [3 /*break*/, 4];
                    return [4 /*yield*/, uploadFrontendCode(frontendCodeDir, bucket + "-" + prodAlias)];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4:
                    console.log('Deploy finished');
                    return [2 /*return*/];
            }
        });
    });
}
function uploadFrontendCode(codeDir, bucket, prefix) {
    return __awaiter(this, void 0, void 0, function () {
        var error_1, error_2;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 4]);
                    return [4 /*yield*/, ossClient.getBucketInfo(bucket)];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 2:
                    error_1 = _a.sent();
                    return [4 /*yield*/, spinner("Create " + bucket + " bucket", function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, ossClient.putBucket(bucket)];
                                    case 1:
                                        _a.sent();
                                        return [4 /*yield*/, ossClient.putBucketACL(bucket, 'public-read')];
                                    case 2:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 4:
                    ossClient.useBucket(bucket);
                    return [4 /*yield*/, spinner("Upload to " + bucket + " bucket", function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, doUploadFrontendCode(codeDir, prefix)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 5:
                    _a.sent();
                    if (!!prefix) return [3 /*break*/, 11];
                    _a.label = 6;
                case 6:
                    _a.trys.push([6, 8, , 10]);
                    return [4 /*yield*/, ossClient.getBucketWebsite(bucket)];
                case 7:
                    _a.sent();
                    return [3 /*break*/, 10];
                case 8:
                    error_2 = _a.sent();
                    return [4 /*yield*/, ossClient.putBucketWebsite(bucket, {
                            index: 'index.html'
                        })];
                case 9:
                    _a.sent();
                    return [3 /*break*/, 10];
                case 10:
                    console.log("    - Url: " + chalk.green.bold("http://" + bucket + ".oss-" + profile.defaultRegion + ".aliyuncs.com"));
                    _a.label = 11;
                case 11: return [2 /*return*/];
            }
        });
    });
}
function doUploadFrontendCode(codeDir, prefix) {
    if (prefix === void 0) { prefix = ''; }
    return __awaiter(this, void 0, void 0, function () {
        var files;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    files = fs_extra_1.readdirSync(codeDir);
                    return [4 /*yield*/, Promise.all(files.map(function (fileName) { return __awaiter(_this, void 0, void 0, function () {
                            var fullPath, file;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        fullPath = path_1.join(codeDir, fileName);
                                        file = fs_extra_1.statSync(fullPath);
                                        if (!file.isDirectory()) return [3 /*break*/, 2];
                                        return [4 /*yield*/, doUploadFrontendCode(fullPath, prefix)];
                                    case 1:
                                        _a.sent();
                                        return [3 /*break*/, 4];
                                    case 2: return [4 /*yield*/, ossClient.put(path_1.join(prefix, path_1.relative(frontendCodeDir, fullPath)), fullPath)];
                                    case 3:
                                        _a.sent();
                                        _a.label = 4;
                                    case 4: return [2 /*return*/];
                                }
                            });
                        }); }))];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function deployBackend(context, deployConfig) {
    return __awaiter(this, void 0, void 0, function () {
        var pkg, prod, backendCodeDir, service, funciton, trigger, apiGateway, type, serviceName, functionName, zip, versionId, apiGroup;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    pkg = context.pkg, prod = context.prod;
                    backendCodeDir = path_1.resolve(cli_1.getHomePath(pkg, cli_1.BACKEND_TARGET), 'dist');
                    if (!fs_extra_1.existsSync(backendCodeDir)) {
                        console.log(chalk(templateObject_2 || (templateObject_2 = __makeTemplateObject(["{yellow Please build backend first with \"malagu build\"}"], ["{yellow Please build backend first with \"malagu build\"}"]))));
                        return [2 /*return*/];
                    }
                    client = new FCClient(profile.accountId, {
                        accessKeyID: profile.accessKeyId,
                        accessKeySecret: profile.accessKeySecret,
                        region: profile.defaultRegion,
                        timeout: 600000
                    });
                    service = deployConfig.service, funciton = deployConfig.funciton, trigger = deployConfig.trigger, apiGateway = deployConfig.apiGateway, type = deployConfig.type;
                    serviceName = service.name;
                    functionName = funciton.name;
                    console.log("Deploying " + chalk.yellow('backend') + " to Function Compute...");
                    return [4 /*yield*/, createOrUpdateService(serviceName, service)];
                case 1:
                    _a.sent();
                    zip = new JSZip();
                    return [4 /*yield*/, loadCode(backendCodeDir, zip)];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, createOrUpdateFunction(serviceName, functionName, funciton, zip)];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, client.publishVersion(serviceName)];
                case 4:
                    versionId = (_a.sent()).data.versionId;
                    return [4 /*yield*/, createOrUpdateAlias(serviceName, devAlias, versionId)];
                case 5:
                    _a.sent();
                    if (!prod) return [3 /*break*/, 7];
                    return [4 /*yield*/, createOrUpdateAlias(serviceName, prodAlias, versionId)];
                case 6:
                    _a.sent();
                    _a.label = 7;
                case 7:
                    if (!(type === 'http')) return [3 /*break*/, 10];
                    return [4 /*yield*/, createOrUpdateHttpTrigger(serviceName, functionName, trigger, devAlias)];
                case 8:
                    _a.sent();
                    if (!prod) return [3 /*break*/, 10];
                    return [4 /*yield*/, createOrUpdateHttpTrigger(serviceName, functionName, trigger, prodAlias)];
                case 9:
                    _a.sent();
                    _a.label = 10;
                case 10:
                    if (!(type === 'api-gateway')) return [3 /*break*/, 14];
                    console.log('- API Gateway:');
                    return [4 /*yield*/, createGroupIfNeed(apiGateway.group)];
                case 11:
                    apiGroup = _a.sent();
                    return [4 /*yield*/, deployApi(serviceName, functionName, apiGateway, apiGroup, devAlias)];
                case 12:
                    _a.sent();
                    if (!prod) return [3 /*break*/, 14];
                    return [4 /*yield*/, deployApi(serviceName + "." + prodAlias, functionName, apiGateway, apiGroup, prodAlias)];
                case 13:
                    _a.sent();
                    _a.label = 14;
                case 14:
                    console.log('Deploy finished');
                    return [2 /*return*/];
            }
        });
    });
}
function createCloudAPI() {
    return new CloudAPI({
        accessKeyId: profile.accessKeyId,
        accessKeySecret: profile.accessKeySecret,
        endpoint: "http://apigateway." + profile.defaultRegion + ".aliyuncs.com",
    });
}
function deployApi(serviceName, functionName, option, apiGroup, alias) {
    return __awaiter(this, void 0, void 0, function () {
        var api, stage, opt, ag, ram, role, _api, apiDetail;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    api = option.api, stage = option.stage;
                    opt = __assign({}, api);
                    opt.name = opt.name + "_" + alias;
                    opt['function'] = profile.defaultRegion + "/" + serviceName + "." + alias + "/" + functionName;
                    ag = createCloudAPI();
                    ram = new Ram({
                        accessKeyId: profile.accessKeyId,
                        accessKeySecret: profile.accessKeySecret,
                        endpoint: 'https://ram.aliyuncs.com'
                    });
                    return [4 /*yield*/, createRoleIfNeed(ram, 'apigatewayAccessFC')];
                case 1:
                    role = _a.sent();
                    return [4 /*yield*/, createOrUpdateAPI(ag, apiGroup, opt, role)];
                case 2:
                    _api = _a.sent();
                    return [4 /*yield*/, ag.deployApi({
                            GroupId: apiGroup.GroupId,
                            ApiId: _api.ApiId,
                            StageName: stage,
                            Description: "deployed by malagu at " + new Date().toISOString()
                        })];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, ag.describeApi({
                            GroupId: apiGroup.GroupId,
                            ApiId: _api.ApiId
                        })];
                case 4:
                    apiDetail = _a.sent();
                    console.log('    - Url: %s http://%s%s', apiDetail.RequestConfig.RequestHttpMethod, apiGroup.SubDomain, apiDetail.RequestConfig.RequestPath);
                    apiDetail.DeployedInfos.DeployedInfo.forEach(function (info) {
                        if (info.DeployedStatus === 'DEPLOYED') {
                            console.log("    - stage: " + info.StageName + ", deployed, version: " + info.EffectiveVersion);
                        }
                        else {
                            console.log("    - stage: " + info.StageName + ", undeployed");
                        }
                    });
                    return [2 /*return*/];
            }
        });
    });
}
function createOrUpdateHttpTrigger(serviceName, functionName, option, alias) {
    return __awaiter(this, void 0, void 0, function () {
        var opt, ex_1;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    opt = __assign({}, option);
                    opt.triggerName = opt.name + "-" + alias;
                    delete opt.name;
                    opt.qualifier = alias;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 4, , 8]);
                    return [4 /*yield*/, client.getTrigger(serviceName, functionName, opt.triggerName)];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, spinner("Update " + opt.triggerName + " trigger", function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, client.updateTrigger(serviceName, functionName, opt.triggerName, opt)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 8];
                case 4:
                    ex_1 = _a.sent();
                    if (!(ex_1.code === 'TriggerNotFound')) return [3 /*break*/, 6];
                    return [4 /*yield*/, spinner("Create " + opt.triggerName + " trigger", function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, client.createTrigger(serviceName, functionName, opt)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 5:
                    _a.sent();
                    return [3 /*break*/, 7];
                case 6: throw ex_1;
                case 7: return [3 /*break*/, 8];
                case 8:
                    console.log("    - Methods: " + opt.triggerConfig.methods);
                    console.log(chalk(templateObject_3 || (templateObject_3 = __makeTemplateObject(["    - Url: ", ""], ["    - Url: ",
                        ""])), chalk.green.bold("https://" + profile.accountId + "." + profile.defaultRegion + ".fc.aliyuncs.com/2016-08-15/proxy/" + serviceName + "." + alias + "/" + functionName + "/")));
                    return [2 /*return*/];
            }
        });
    });
}
function createOrUpdateService(serviceName, option) {
    return __awaiter(this, void 0, void 0, function () {
        var ex_2;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 7]);
                    delete option.name;
                    return [4 /*yield*/, client.getService(serviceName)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, spinner("Update " + serviceName + " service", function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, client.updateService(serviceName, option)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 7];
                case 3:
                    ex_2 = _a.sent();
                    if (!(ex_2.code === 'ServiceNotFound')) return [3 /*break*/, 5];
                    return [4 /*yield*/, spinner("Create a " + serviceName + " service", function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, client.createService(serviceName, option)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 4:
                    _a.sent();
                    return [3 /*break*/, 6];
                case 5: throw ex_2;
                case 6: return [3 /*break*/, 7];
                case 7: return [2 /*return*/];
            }
        });
    });
}
function createOrUpdateFunction(serviceName, functionName, option, code) {
    return __awaiter(this, void 0, void 0, function () {
        var ex_3;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 7]);
                    return [4 /*yield*/, client.getFunction(serviceName, functionName)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, spinner("Update " + functionName + " function", function () { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b, _c, _d, _e, _f;
                            return __generator(this, function (_g) {
                                switch (_g.label) {
                                    case 0:
                                        _b = (_a = client).updateFunction;
                                        _c = [serviceName, functionName];
                                        _d = [__assign({}, option)];
                                        _e = {};
                                        _f = {};
                                        return [4 /*yield*/, code.generateAsync({ type: 'base64', platform: 'UNIX' })];
                                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([__assign.apply(void 0, _d.concat([(_e.code = (_f.zipFile = _g.sent(),
                                                    _f), _e)]))]))];
                                    case 2:
                                        _g.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 7];
                case 3:
                    ex_3 = _a.sent();
                    if (!(ex_3.code === 'FunctionNotFound')) return [3 /*break*/, 5];
                    delete option.name;
                    option.functionName = functionName;
                    return [4 /*yield*/, spinner("Create " + functionName + " function", function () { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b, _c, _d, _e, _f;
                            return __generator(this, function (_g) {
                                switch (_g.label) {
                                    case 0:
                                        _b = (_a = client).createFunction;
                                        _c = [serviceName];
                                        _d = [__assign({}, option)];
                                        _e = {};
                                        _f = {};
                                        return [4 /*yield*/, code.generateAsync({ type: 'base64', platform: 'UNIX' })];
                                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([__assign.apply(void 0, _d.concat([(_e.code = (_f.zipFile = _g.sent(),
                                                    _f), _e)]))]))];
                                    case 2:
                                        _g.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 4:
                    _a.sent();
                    return [3 /*break*/, 6];
                case 5: throw ex_3;
                case 6: return [3 /*break*/, 7];
                case 7: return [2 /*return*/];
            }
        });
    });
}
function createOrUpdateAlias(serviceName, aliasName, versionId) {
    return __awaiter(this, void 0, void 0, function () {
        var ex_4;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 7]);
                    return [4 /*yield*/, client.getAlias(serviceName, aliasName)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, spinner("Update " + aliasName + " alias to version " + versionId, function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, client.updateAlias(serviceName, aliasName, versionId)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 7];
                case 3:
                    ex_4 = _a.sent();
                    if (!(ex_4.code === 'AliasNotFound')) return [3 /*break*/, 5];
                    return [4 /*yield*/, spinner("Create " + aliasName + " alias to version " + versionId, function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, client.createAlias(serviceName, aliasName, versionId)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 4:
                    _a.sent();
                    return [3 /*break*/, 6];
                case 5: throw ex_4;
                case 6: return [3 /*break*/, 7];
                case 7: return [2 /*return*/];
            }
        });
    });
}
function loadCode(codeDir, zip) {
    return __awaiter(this, void 0, void 0, function () {
        var files;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    files = fs_extra_1.readdirSync(codeDir);
                    return [4 /*yield*/, Promise.all(files.map(function (fileName) { return __awaiter(_this, void 0, void 0, function () {
                            var fullPath, file, dir;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        fullPath = path_1.join(codeDir, fileName);
                                        file = fs_extra_1.statSync(fullPath);
                                        if (!file.isDirectory()) return [3 /*break*/, 2];
                                        dir = zip.folder(fileName);
                                        return [4 /*yield*/, loadCode(fullPath, dir)];
                                    case 1:
                                        _a.sent();
                                        return [3 /*break*/, 3];
                                    case 2:
                                        zip.file(fileName, fs_extra_1.readFileSync(fullPath));
                                        _a.label = 3;
                                    case 3: return [2 /*return*/];
                                }
                            });
                        }); }))];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function createGroupIfNeed(group) {
    return __awaiter(this, void 0, void 0, function () {
        var ag, groupName, groupDescription, groups, list, findGroup;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    ag = createCloudAPI();
                    groupName = group.name;
                    groupDescription = group.description;
                    return [4 /*yield*/, ag.describeApiGroups({
                            GroupName: groupName // filter out
                        }, { timeout: 10000 })];
                case 1:
                    groups = _a.sent();
                    list = groups.ApiGroupAttributes.ApiGroupAttribute;
                    findGroup = list.find(function (item) { return item.GroupName === groupName; });
                    if (!!findGroup) return [3 /*break*/, 3];
                    return [4 /*yield*/, spinner({ indent: 4, text: "Create " + groupName + " group" }, function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, ag.createApiGroup({
                                            GroupName: groupName,
                                            Description: groupDescription
                                        }, { timeout: 10000 })];
                                    case 1:
                                        findGroup = _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    console.log("    - Skip " + groupName + " group creation");
                    _a.label = 4;
                case 4: return [2 /*return*/, findGroup];
            }
        });
    });
}
function createRoleIfNeed(ram, roleName) {
    return __awaiter(this, void 0, void 0, function () {
        var role, ex_5, policyName, policies, policy;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, ram.getRole({
                            RoleName: roleName
                        }, { timeout: 10000 })];
                case 1:
                    role = _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    ex_5 = _a.sent();
                    if (ex_5.name !== 'EntityNotExist.RoleError') {
                        throw ex_5;
                    }
                    return [3 /*break*/, 3];
                case 3:
                    if (!!role) return [3 /*break*/, 5];
                    return [4 /*yield*/, spinner({ indent: 4, text: "Create " + roleName + " role" }, function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, ram.createRole({
                                            RoleName: roleName,
                                            Description: 'API网关访问 FunctionCompute',
                                            AssumeRolePolicyDocument: JSON.stringify({
                                                'Statement': [
                                                    {
                                                        'Action': 'sts:AssumeRole',
                                                        'Effect': 'Allow',
                                                        'Principal': {
                                                            'Service': [
                                                                'apigateway.aliyuncs.com'
                                                            ]
                                                        }
                                                    }
                                                ],
                                                'Version': '1'
                                            })
                                        })];
                                    case 1:
                                        role = _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 4:
                    _a.sent();
                    _a.label = 5;
                case 5:
                    policyName = 'AliyunFCInvocationAccess';
                    return [4 /*yield*/, ram.listPoliciesForRole({
                            RoleName: roleName
                        })];
                case 6:
                    policies = _a.sent();
                    policy = policies.Policies.Policy.find(function (item) { return item.PolicyName === policyName; });
                    if (!!policy) return [3 /*break*/, 8];
                    return [4 /*yield*/, ram.attachPolicyToRole({
                            PolicyType: 'System',
                            PolicyName: policyName,
                            RoleName: roleName
                        })];
                case 7:
                    _a.sent();
                    _a.label = 8;
                case 8: return [2 /*return*/, role];
            }
        });
    });
}
function createOrUpdateAPI(ag, group, conf, role) {
    return __awaiter(this, void 0, void 0, function () {
        var apiName, _a, fcRegion, serviceName, functionName, groupId, result, api, method, parameters, requestParameters, serviceParameters, serviceParametersMap, params, openidConf;
        var _this = this;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    apiName = conf.name;
                    _a = __read(conf['function'].split('/'), 3), fcRegion = _a[0], serviceName = _a[1], functionName = _a[2];
                    groupId = group.GroupId;
                    return [4 /*yield*/, ag.describeApis({
                            ApiName: apiName,
                            GroupId: groupId
                        })];
                case 1:
                    result = _b.sent();
                    api = result.ApiSummarys && result.ApiSummarys.ApiSummary[0];
                    method = conf.method || 'POST';
                    parameters = conf.parameters || [];
                    requestParameters = parameters.map(function (item) { return ({
                        ApiParameterName: item.name,
                        Location: item.location || 'Query',
                        ParameterType: item.type || 'String',
                        Required: item.required
                    }); });
                    serviceParameters = parameters.map(function (item) { return ({
                        ServiceParameterName: item.name,
                        Location: item.location || 'Query',
                        Type: item.type || 'String',
                        ParameterCatalog: 'REQUEST'
                    }); });
                    serviceParametersMap = parameters.map(function (item) { return ({
                        ServiceParameterName: item.name,
                        RequestParameterName: item.name
                    }); });
                    params = {
                        GroupId: groupId,
                        ApiName: apiName,
                        Visibility: conf.visibility || 'PUBLIC',
                        Description: conf.description || 'The awesome api',
                        AuthType: conf.auth_type || 'ANONYMOUS',
                        RequestConfig: JSON.stringify({
                            'RequestHttpMethod': method,
                            'RequestProtocol': conf.requestProtocol || 'HTTP,HTTPS',
                            'BodyFormat': conf.body_format || 'STREAM',
                            'PostBodyDescription': '',
                            'RequestPath': conf.path
                        }),
                        RequestParameters: JSON.stringify(requestParameters),
                        ServiceParameters: JSON.stringify(serviceParameters),
                        ServiceParametersMap: JSON.stringify(serviceParametersMap),
                        ServiceConfig: JSON.stringify({
                            'ServiceProtocol': 'FunctionCompute',
                            'ContentTypeValue': 'application/json; charset=UTF-8',
                            'Mock': 'FALSE',
                            'MockResult': '',
                            'ServiceTimeout': (conf.timeout || 3) * 1000,
                            'ServiceAddress': '',
                            'ServicePath': '',
                            'ServiceHttpMethod': '',
                            'ContentTypeCatagory': 'DEFAULT',
                            'ServiceVpcEnable': 'FALSE',
                            FunctionComputeConfig: {
                                FcRegionId: fcRegion,
                                ServiceName: serviceName,
                                FunctionName: functionName,
                                RoleArn: role.Role.Arn
                            }
                        }),
                        ResultType: conf.resultType || 'PASSTHROUGH',
                        ResultSample: conf.resultSample || 'result sample'
                    };
                    if (params.AuthType === 'OPENID') {
                        openidConf = conf.openid_connect_config || {};
                        params.OpenIdConnectConfig = JSON.stringify({
                            'IdTokenParamName': openidConf.id_token_param_name || 'token',
                            'OpenIdApiType': openidConf.openid_api_type || 'BUSINESS',
                            'PublicKeyId': openidConf.public_key_id,
                            'PublicKey': openidConf.public_key
                        });
                    }
                    if (!!api) return [3 /*break*/, 3];
                    return [4 /*yield*/, spinner({ indent: 4, text: "Create " + apiName + " api" }, function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, ag.createApi(params)];
                                    case 1:
                                        api = _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 2:
                    _b.sent();
                    return [3 /*break*/, 5];
                case 3: return [4 /*yield*/, spinner({ indent: 4, text: "Update " + apiName + " api" }, function () { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, ag.modifyApi(Object.assign(params, {
                                        ApiId: api.ApiId
                                    }))];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); })];
                case 4:
                    _b.sent();
                    _b.label = 5;
                case 5: return [2 /*return*/, api];
            }
        });
    });
}
function spinner(options, cb) {
    return __awaiter(this, void 0, void 0, function () {
        var opts, s, error_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    opts = options;
                    if (typeof options === 'string') {
                        opts = { text: options, discardStdin: false };
                    }
                    else {
                        opts.discardStdin = false;
                    }
                    s = ora(opts).start();
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, cb()];
                case 2:
                    _a.sent();
                    s.succeed();
                    return [3 /*break*/, 4];
                case 3:
                    error_3 = _a.sent();
                    s.fail(error_3);
                    throw error_3;
                case 4: return [2 /*return*/];
            }
        });
    });
}
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=deploy.js.map