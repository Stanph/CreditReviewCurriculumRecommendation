"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var profile_provider_1 = require("./profile-provider");
var Deferred = /** @class */ (function () {
    function Deferred() {
        var _this = this;
        this.promise = new Promise(function (resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
    }
    return Deferred;
}());
exports.Deferred = Deferred;
exports.default = (function (context) {
    var app = context.app, entryContextProvider = context.entryContextProvider, pkg = context.pkg;
    var initialized = false;
    var init;
    var handler;
    var initDeferred = new Deferred();
    var compileDeferred = new Deferred();
    var type = pkg.backendConfig.deployConfig.type;
    context.compiler.hooks.done.tap('FCAdapterServe', function () {
        entryContextProvider().then(function (obj) {
            init = obj.init;
            handler = obj.handler;
            initialized = false;
            compileDeferred.resolve();
        });
    });
    console.log("Serve " + type + " type for function compute");
    if (type !== 'http') {
        app.use(function (req, res, next) {
            req.rawBody = '';
            req.setEncoding('utf8');
            req.on('data', function (chunk) {
                req.rawBody += chunk;
            });
            req.on('end', function () {
                next();
            });
        });
    }
    var doHandler = function (req, res, ctx) {
        if (type === 'http') {
            handler(req, res, ctx);
        }
        else if (type === 'event') {
            handler(req.rawBody, ctx, getCallback(res, type));
        }
        else {
            handler(JSON.stringify({
                headers: req.headers,
                body: req.rawBody
            }), ctx, getCallback(res, type));
        }
    };
    app.all('*', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
        var ctx, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    res.header('Access-Control-Allow-Origin', '*');
                    res.header('Access-Control-Allow-Credentials', 'true');
                    _a = {};
                    return [4 /*yield*/, new profile_provider_1.ProfileProvider().provide(true)];
                case 1:
                    ctx = (_a.credentials = _b.sent(),
                        _a);
                    return [4 /*yield*/, compileDeferred.promise];
                case 2:
                    _b.sent();
                    if (!!initialized) return [3 /*break*/, 4];
                    initDeferred = new Deferred();
                    initialized = true;
                    return [4 /*yield*/, init(ctx, function (err) {
                            var callback = getCallback(res, type);
                            if (err) {
                                callback(err);
                            }
                            else {
                                initDeferred.resolve();
                            }
                        })];
                case 3:
                    _b.sent();
                    _b.label = 4;
                case 4: return [4 /*yield*/, initDeferred.promise];
                case 5:
                    _b.sent();
                    doHandler(req, res, ctx);
                    return [2 /*return*/];
            }
        });
    }); });
});
function getCallback(res, type) {
    return function (e, data) {
        if (e) {
            var output = formatErr(e);
            console.error(output);
            res.statusCode = 417;
            res.end(output);
        }
        else {
            if (data) {
                if (type === 'api-gateway') {
                    res.set(data.headers);
                    res.send(data.body);
                }
                else {
                    res.send(data);
                }
            }
        }
    };
}
function formatErr(err) {
    var output = {};
    if (err instanceof Error) {
        output = {
            errorMessage: err.message,
            errorType: err.name,
            stackTrace: err.stack ? err.stack.split('\n').slice(1).map(function (line) {
                return line.trim();
            }) : ''
        };
    }
    else {
        output = {
            errorMessage: err
        };
    }
    return new Buffer(JSON.stringify(output), 'utf8');
}
//# sourceMappingURL=serve.js.map